Param(
    [switch]$Help,
    [switch] $Debugging,
    [string] $CustomerName,
    [string] $WorkloadName,
    [Parameter(mandatory=$true)]
    [string] $ExcelFile,
    [string] $PPTTemplateFile,
    [string] $WordTemplateFile,
    [switch] $IncludeOutages,
    [array] $SubscriptionIds,
    [string] $TenantID
    )



$Global:AUTOMESSAGE = 'AUTOMATICALLY MODIFIED (Please Review)'

if ($Debugging.IsPresent)
    {
        $ErrorActionPreference = [System.Management.Automation.ActionPreference]::Continue
        $DebugPreference = 'Continue'
    }
else
    {
        $ErrorActionPreference = [System.Management.Automation.ActionPreference]::SilentlyContinue
        $DebugPreference = "silentlycontinue" 
    }

if (!$PPTTemplateFile)
    {
        if ((Test-Path -Path ($PSScriptRoot+'\Mandatory - Executive Summary presentation - Template.pptx') -PathType Leaf) -eq $true) {
        $PPTTemplateFile = ($PSScriptRoot+'\Mandatory - Executive Summary presentation - Template.pptx')
        }
        else
        {
            Write-Host
        }
    }

if (!$WordTemplateFile)
    {
        if ((Test-Path -Path ($PSScriptRoot+'\Optional - Assessment Report - Template.docx') -PathType Leaf) -eq $true) {
            $WordTemplateFile = ($PSScriptRoot+'\Optional - Assessment Report - Template.docx')
        }
    }

if (!$CustomerName)
    {
        $CustomerName = '[Customer Name]'
    }

if (!$WorkloadName)
    {
        $WorkloadName = '[Workload Name]'
    }

if ($IncludeOutages.IsPresent -and ([string]::IsNullOrEmpty($TenantID) -or [string]::IsNullOrEmpty($SubscriptionIds)))
    {
        Write-Debug ""
        Write-Debug "Tenant ID and Suscription IDs are required when using -IncludeOutages"
        Write-Debug ""
        Exit
    }


function Help {
    Write-Host ""
    Write-Host "Parameters"
    Write-Host ""
    Write-Host " -ExcelFile            :  Mandatory; WARA Excel file generated by '2_wara_data_analyzer.ps1' script and customized."
    Write-Host " -CustomerName         :  Optional; specifies the Name of the Customer to be added to the PPTx and DOCx files. "
    Write-Host " -WorkloadName         :  Optional; specifies the Name of the Workload of the analyses to be added to the PPTx and DOCx files. "
    Write-Host " -PPTTemplateFile      :  Optional; specifies the PPTx template file to be used as source. If not specified the script will look for the file in the same path as the script. "
    Write-Host " -WordTemplateFile     :  Optional; specifies the DOCx template file to be used as source. If not specified the script will look for the file in the same path as the script. "
    Write-Host " -IncludeOutages       :  Optional; When used the script will connect to the customer's environment and will bring most of the Outages and will populate the related PPTx Slides and DOCx tables. When this parameter is used, -TenantID and -SubscriptionIDs must be present. "
    Write-Host " -TenantID <ID>        :  Optional; tenant to be used. "
    Write-Host " -SubscriptionIds <IDs>:  Optional (or SubscriptionsFile); Specifies Subscription(s) to be included in the analysis: Subscription1,Subscription2. "
    Write-Host " -Debugging            :  Writes Debugging information of the script during the execution. "
    Write-Host ""
    Write-Host "Examples: "
    Write-Host ""
    Write-Host "  Running with Outages and Customer details specific Subscriptions in the Tenant"
    Write-Host "  .\3_wara_reports_generator.ps1 -ExcelFile 'C:\WARA_Script\WARA Action Plan 2024-03-07_16_06.xlsx' -CustomerName 'ABC Customs' -WorkloadName 'SAP On Azure' -IncludeOutages -TenantID XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX -SubscriptionIds YYYYYYYY-YYYY-YYYY-YYYY-YYYYYYYYYYYY,AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA"
    Write-Host ""
    Write-Host ""
    Write-Host "  Running with Outages without Customer details specific Subscriptions in the Tenant"
    Write-Host "  .\3_wara_reports_generator.ps1 -ExcelFile 'C:\WARA_Script\WARA Action Plan 2024-03-07_16_06.xlsx' -IncludeOutages -TenantID XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX -SubscriptionIds YYYYYYYY-YYYY-YYYY-YYYY-YYYYYYYYYYYY,AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA"
    Write-Host ""
    Write-Host ""
}


############# Outages Core Data

function OutagesData {

    Write-Host "Parameter -IncludeOutages is present, Authenticating to Azure..."
    Connect-AzAccount -Tenant $TenantID -WarningAction SilentlyContinue -InformationAction SilentlyContinue | Out-Null

    $Date = (Get-Date).AddMonths(-6)

    $Date = $Date.ToString("MM/dd/yyyy")

    $Global:Outages = @()

    foreach ($sub in $SubscriptionIds)
        {
            Select-AzSubscription -Subscription $sub -WarningAction SilentlyContinue -InformationAction SilentlyContinue | Out-Null

            $Token = Get-AzAccessToken

            $header = @{
                'Authorization' = 'Bearer ' + $Token.Token
            }

            $url = ('https://management.azure.com/subscriptions/'+ $Sub +'/providers/Microsoft.ResourceHealth/events?api-version=2022-10-01&queryStartTime='+$Date)


            $Global:Outages += Invoke-RestMethod -Uri $url -Headers $header -Method GET
        }

        $Global:Outageslist = $Outages.value | Where-Object {$_.properties.description -like '*How can customers make incidents like this less impactful?*' } | Sort-Object @{Expression = "properties.eventlevel"; Descending = $false},@{Expression = "properties.status"; Descending = $false} | Select-Object -First 10
}

############# EXCEL 

function Excel {
    Write-Debug "Importing Core Excel Data"

    Write-Host "Openning Excel..."
    $Global:ExcelApplication = New-Object -ComObject Excel.Application
    #$ExcelApplication.Visible = $true
    Start-Sleep 1
    $Global:Ex = $ExcelApplication.Workbooks.Open($ExcelFile)
    Start-Sleep 1

    $Global:ExcelContent = Import-Excel -Path $ExcelFile -WorksheetName ImpactedResources

    $ResourceIDs = $ExcelContent.id | Select-Object -Unique
    $Resources = @()
    Foreach($ID in $ResourceIDs)
        {
            if(![string]::IsNullOrEmpty($ID))
                {
                    $obj = @{
                        'ID'            = $ID;
                        'Subscription'  = $ID.split('/')[2];
                        'Resource Group'= $ID.split('/')[4];
                        'Resource Type' = ($ID.split('/')[6]+'/'+$ID.split('/')[7])
                    }
                    $Resources += $obj
                }            
        }

    $Global:ResourcesTypes = $Resources | Group-Object -Property 'Resource Type' | Sort-Object -Property 'Count' -Descending | Select-Object -First 10

    $Global:ExcelCore = Import-Excel -Path $ExcelFile

    $Global:HighImpact = $ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'High'} | Sort-Object -Property "Number of Impacted Resources?" -Descending
    $Global:MediumImpact = $ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'Medium'} | Sort-Object -Property "Number of Impacted Resources?" -Descending
    $Global:LowImpact = $ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'Low'} | Sort-Object -Property "Number of Impacted Resources?" -Descending

    $Global:ServiceHighImpact = $ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'High' -and $_.'Azure Service / Well-Architected' -eq 'Azure Service'} | Sort-Object -Property "Number of Impacted Resources?" -Descending
    $Global:WordServicempact = $ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and ($_.Impact -eq 'High' -or $_.Impact -eq 'Medium') -and $_.'Azure Service / Well-Architected' -eq 'Azure Service'} | Sort-Object -Property "Number of Impacted Resources?" -Descending
    $Global:WAFHighImpact = $ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'High' -and $_.'Azure Service / Well-Architected' -eq 'Well Architected'} | Sort-Object -Property "Number of Impacted Resources?" -Descending
    $Global:WordWAFImpact = $ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and ($_.Impact -eq 'High' -or $_.Impact -eq 'Medium') -and $_.'Azure Service / Well-Architected' -eq 'Well Architected'} | Sort-Object -Property "Number of Impacted Resources?" -Descending

}

############# PowerPoint and Word

function PPT {
    Write-Host "Openning PowerPoint"

    $Global:Application = New-Object -ComObject PowerPoint.Application

    $msoFalse = [Microsoft.Office.Core.MsoTristate]::msoFalse
    $msoTrue = [Microsoft.Office.Core.MsoTristate]::msoTrue

    $Global:pres = $Application.Presentations.Open($PPTTemplateFile, $msoTrue, $msoFalse, $msoFalse)

}

function Word {
    Write-Host "Openning Word"

    $Global:Word = New-Object -Com Word.Application

    #$Global:Word.Visible = $true

    $Global:Document=$Word.documents.open($WordTemplateFile)

}

############# Slide 1

function Slide1 {
    Write-Debug "Removing First Slide"

    if(($pres.Slides | Where-Object {$_.SlideIndex -eq 1}).Shapes[1].TextFrame.TextRange.Text -notlike '*VBD Update*')
        {
            Write-host 'Incorrect PPTx Template file!' -ForegroundColor DarkRed -BackgroundColor Green
            Write-host "Please use IPKit's PPTx Template File" -ForegroundColor DarkRed -BackgroundColor Green
            Exit
        }

    ($pres.Slides | Where-Object {$_.SlideIndex -eq 1}).Delete()

    $Slide1 = $pres.Slides | Where-Object {$_.SlideIndex -eq 1}

    ($Slide1.Shapes | Where-Object {$_.Id -eq 5}).TextFrame.TextRange.Text = ($CustomerName+ ' - ' + $WorkloadName)
}

############# SLide 12

function Slide12 {
    Write-Debug "Editing Slide 12"

    $Slide12 = $pres.Slides | Where-Object {$_.SlideIndex -eq 12}

    $TargetShape = ($Slide12.Shapes | Where-Object {$_.Id -eq 9})
    $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE
    #$TargetShape.Delete()

    $TargetShape = ($Slide12.Shapes | Where-Object {$_.Id -eq 8})
    $TargetShape.Delete()

    ($Slide12.Shapes | Where-Object {$_.Id -eq 3}).TextFrame.TextRange.Text = ('During the engagement, the Workload '+$WorkloadName+' has been reviewed. The solution is hosted in two Azure regions, and runs mainly IaaS resources, with some PaaS resources, which includes but is not limited to:')


    $loop = 1
    foreach ($ResourcesType in $ResourcesTypes)
        {
            if($loop -eq 1)
                {
                    $ResourceTemp = ($ResourcesType.Name + ' ('+$ResourcesType.'Count'+')')
                    ($Slide12.Shapes | Where-Object {$_.Id -eq 6}).Table.Columns(1).Width = 685
                    ($Slide12.Shapes | Where-Object {$_.Id -eq 6}).Table.Rows(1).Cells(1).Shape.TextFrame.TextRange.Text = $ResourceTemp 
                    ($Slide12.Shapes | Where-Object {$_.Id -eq 6}).Table.Rows(1).Height = 20 
                }
            else
                {
                    $ResourceTemp = ($ResourcesType.Name + ' ('+$ResourcesType.'Count'+')')
                    ($Slide12.Shapes | Where-Object {$_.Id -eq 6}).Table.Rows.Add() | Out-Null
                    ($Slide12.Shapes | Where-Object {$_.Id -eq 6}).Table.Rows($loop).Cells(1).Shape.TextFrame.TextRange.Text = $ResourceTemp
                }
            $loop ++
        }

}

############# Slide 16

function Slide16 {
    Write-Debug "Editing Slide 16"

    $Slide16 = $pres.Slides | Where-Object {$_.SlideIndex -eq 16}

    $TargetShape = ($Slide16.Shapes | Where-Object {$_.Id -eq 41})
    $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE
    #$TargetShape.Delete()


    $count = 1
    foreach ($Impact in $ServiceHighImpact)
        {
            if($count -lt 5)
                {
                    ($Slide16.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs($count).text = $Impact.'Recommendation Title'
                    $count ++
                }
        }

        while (($Slide16.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs().count -gt 5)
            {
                ($Slide16.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs(6).Delete()
            }

    if($WAFHighImpact.count -ne 0)
        {
            $count = 1
            foreach ($Impact in $WAFHighImpact)
                {
                    if($count -lt 5)
                        {
                            ($Slide16.Shapes | Where-Object {$_.Id -eq 12}).TextFrame.TextRange.Paragraphs($count).text = $Impact.'Recommendation Title'
                            $count ++
                        }
                }
        }
    else
        {
            ($Slide16.Shapes | Where-Object {$_.Id -eq 12}).TextFrame.TextRange.Text = ' '
        }

    while (($Slide16.Shapes | Where-Object {$_.Id -eq 12}).TextFrame.TextRange.Paragraphs().count -gt 5)
        {
            ($Slide16.Shapes | Where-Object {$_.Id -eq 12}).TextFrame.TextRange.Paragraphs(6).Delete()
        }


    #Total Recomendations
    ($Slide16.Shapes | Where-Object {$_.Id -eq 44}).GroupItems[3].TextFrame.TextRange.Text = [string]($ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0}).count
    #High Impact
    ($Slide16.Shapes | Where-Object {$_.Id -eq 44}).GroupItems[4].TextFrame.TextRange.Text = [string]($ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'High'}).count
    #Medium Impact
    ($Slide16.Shapes | Where-Object {$_.Id -eq 44}).GroupItems[5].TextFrame.TextRange.Text = [string]($ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'Medium'}).count
    #Low Impact
    ($Slide16.Shapes | Where-Object {$_.Id -eq 44}).GroupItems[6].TextFrame.TextRange.Text = [string]($ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'Low'}).count
    #Impacted Resources
    ($Slide16.Shapes | Where-Object {$_.Id -eq 44}).GroupItems[7].TextFrame.TextRange.Text = [string]($ExcelContent.id | Where-Object {![string]::IsNullOrEmpty($_)} | Select-Object -Unique).count

}

############# Slide 17

function Slide17 {
    Write-Debug "Editing Slide 17"

    $Slide17 = $pres.Slides | Where-Object {$_.SlideIndex -eq 17}

    $TargetShape = ($Slide17.Shapes | Where-Object {$_.Id -eq 41})
    $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE
    #$TargetShape.Delete()


    Write-Debug "Finding Charts in the Excel File"
    $WS2 = $Global:Ex.Worksheets | Where-Object { $_.Name -eq 'Charts' }

    Write-Debug "Replacing Chart 1"
    #Copy Excel Chart0
    ($Slide17.Shapes | Where-Object {$_.Id -eq 3}).Chart.Delete()
    $WS2.ChartObjects('ChartP0').copy()
    $Slide17.Shapes.Paste() | Out-Null
    Start-Sleep 2
    foreach ($Shape in $Slide17.Shapes)
        {
            if($Shape.Name -eq 'ChartP0')
                {
                    $Shape.IncrementLeft(240)
                }
        }

    Write-Debug "Replacing Chart 2"
    #Copy Excel Chart1
    ($Slide17.Shapes | Where-Object {$_.Id -eq 5}).Chart.Delete()
    $WS2.ChartObjects('ChartP1').copy()
    $Slide17.Shapes.Paste() | Out-Null
    Start-Sleep 2
    foreach ($Shape in $Slide17.Shapes)
        {
            if($Shape.Name -eq 'ChartP1')
                {
                    $Shape.IncrementLeft(-260)
                    $Shape.IncrementTop(45)
                }
        }

}

############# Slide 23

function Slide23 {
    Write-Debug "Editing Slide 23"

    $FirstSlide = 23
    $TableID = 6
    $CurrentSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}
    $CoreSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}

    $TargetShape = ($CurrentSlide.Shapes | Where-Object {$_.Id -eq 41})
    $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE
    #$TargetShape.Delete()

    $row = 2
    while ($row -lt 6)
        {
            $cell = 1
            while($cell -lt 5)
                {
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells($cell).Shape.TextFrame.TextRange.Text = ''
                    $Cell ++
                }
            $row ++
        }

    $Counter = 1
    $RecomNumber = 1
    $row = 2    
    foreach($Impact in $HighImpact)
        {
            if($Counter -lt 14)
                {
                    #Number
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$RecomNumber
                    #Recommendation
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = $Impact.'Recommendation Title'
                    #Service
                    if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                        {
                            $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                        }
                    else
                        {
                            $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                        }
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = $ServiceName
                    #Impacted Resources
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = [string]$Impact.'Number of Impacted Resources?'
                    $counter ++
                    $RecomNumber ++
                    $row ++
                }
            else
                {
                    $Counter = 1
                    $CustomLayout = $CurrentSlide.CustomLayout
                    $FirstSlide ++
                    $pres.Slides.addSlide($FirstSlide,$customLayout) | Out-Null

                    $NextSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}
                    ($CoreSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Copy()
                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 2}).TextFrame.TextRange.Paste() | Out-Null
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Copy()
                    $NextSlide.Shapes.Paste() | Out-Null
                    $TableID = 3
                    ($CoreSlide.Shapes | Where-Object {$_.Id -eq 41}).Copy()
                    $NextSlide.Shapes.Paste() | Out-Null

                    $rowTemp = 2
                    while ($rowTemp -lt 15)
                        {
                            $cell = 1
                            while($cell -lt 5)
                                {
                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($rowTemp).Cells($cell).Shape.TextFrame.TextRange.Text = ''
                                    $Cell ++
                                }
                            $rowTemp ++
                        }

                    $CurrentSlide = $NextSlide

                    $row = 2
                    #Number
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$RecomNumber
                    #Recommendation
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = $Impact.'Recommendation Title'
                    #Service
                    if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                        {
                            $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                        }
                    else
                        {
                            $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                        }
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = $ServiceName
                    #Impacted Resources
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = [string]$Impact.'Number of Impacted Resources?'
                    $Counter ++
                    $RecomNumber ++
                    $row ++
                }
        }

}

############# Slide 24

function Slide24 {
    Write-Debug "Editing Slide 24"

    $FirstSlide = 24
    $TableID = 6
    $CurrentSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}
    $CoreSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}

    $TargetShape = ($CurrentSlide.Shapes | Where-Object {$_.Id -eq 41})
    $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE
    #$TargetShape.Delete()

    $row = 2
    while ($row -lt 6)
        {
            $cell = 1
            while($cell -lt 5)
                {
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells($cell).Shape.TextFrame.TextRange.Text = ''
                    $Cell ++
                }
            $row ++
        }

    $Counter = 1
    $RecomNumber = 1
    $row = 2    
    foreach($Impact in $MediumImpact)
        {
            if($Counter -lt 14)
                {
                    #Number
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$RecomNumber
                    #Recommendation
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = $Impact.'Recommendation Title'
                    #Service
                    if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                        {
                            $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                        }
                    else
                        {
                            $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                        }
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = $ServiceName
                    #Impacted Resources
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = [string]$Impact.'Number of Impacted Resources?'
                    $counter ++
                    $RecomNumber ++
                    $row ++
                }
            else
                {
                    $Counter = 1
                    $CustomLayout = $CurrentSlide.CustomLayout
                    $FirstSlide ++
                    $pres.Slides.addSlide($FirstSlide,$customLayout) | Out-Null

                    $NextSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}
                    ($CoreSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Copy()
                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 2}).TextFrame.TextRange.Paste() | Out-Null
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Copy()
                    $NextSlide.Shapes.Paste() | Out-Null
                    $TableID = 3
                    ($CoreSlide.Shapes | Where-Object {$_.Id -eq 41}).Copy()
                    $NextSlide.Shapes.Paste() | Out-Null

                    $rowTemp = 2
                    while ($rowTemp -lt 15)
                        {
                            $cell = 1
                            while($cell -lt 5)
                                {
                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($rowTemp).Cells($cell).Shape.TextFrame.TextRange.Text = ''
                                    $Cell ++
                                }
                            $rowTemp ++
                        }

                    $CurrentSlide = $NextSlide

                    $row = 2
                    #Number
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$RecomNumber
                    #Recommendation
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = $Impact.'Recommendation Title'
                    #Service
                    if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                        {
                            $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                        }
                    else
                        {
                            $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                        }
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = $ServiceName
                    #Impacted Resources
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = [string]$Impact.'Number of Impacted Resources?'
                    $Counter ++
                    $RecomNumber ++
                    $row ++
                }
        }

}

############# Slide 25
function Slide25 {
    Write-Debug "Editing Slide 25"

    $FirstSlide = 25
    $TableID = 6
    $CurrentSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}
    $CoreSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}

    $TargetShape = ($CurrentSlide.Shapes | Where-Object {$_.Id -eq 41})
    $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE
    #$TargetShape.Delete()

    $row = 2
    while ($row -lt 6)
        {
            $cell = 1
            while($cell -lt 5)
                {
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells($cell).Shape.TextFrame.TextRange.Text = ''
                    $Cell ++
                }
            $row ++
        }

    $Counter = 1
    $RecomNumber = 1
    $row = 2    
    foreach($Impact in $LowImpact)
        {
            if($Counter -lt 14)
                {
                    #Number
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$RecomNumber
                    #Recommendation
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = $Impact.'Recommendation Title'
                    #Service
                    if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                        {
                            $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                        }
                    else
                        {
                            $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                        }
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = $ServiceName
                    #Impacted Resources
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = [string]$Impact.'Number of Impacted Resources?'
                    $counter ++
                    $RecomNumber ++
                    $row ++
                }
            else
                {
                    $Counter = 1
                    $CustomLayout = $CurrentSlide.CustomLayout
                    $FirstSlide ++
                    $pres.Slides.addSlide($FirstSlide,$customLayout) | Out-Null

                    $NextSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}
                    ($CoreSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Copy()
                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 2}).TextFrame.TextRange.Paste() | Out-Null
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Copy()
                    $NextSlide.Shapes.Paste() | Out-Null
                    $TableID = 3
                    ($CoreSlide.Shapes | Where-Object {$_.Id -eq 41}).Copy()
                    $NextSlide.Shapes.Paste() | Out-Null

                    $rowTemp = 2
                    while ($rowTemp -lt 15)
                        {
                            $cell = 1
                            while($cell -lt 5)
                                {
                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($rowTemp).Cells($cell).Shape.TextFrame.TextRange.Text = ''
                                    $Cell ++
                                }
                            $rowTemp ++
                        }

                    $CurrentSlide = $NextSlide

                    $row = 2
                    #Number
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$RecomNumber
                    #Recommendation
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = $Impact.'Recommendation Title'
                    #Service
                    if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                        {
                            $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                        }
                    else
                        {
                            $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                        }
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = $ServiceName
                    #Impacted Resources
                    ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = [string]$Impact.'Number of Impacted Resources?'
                    $Counter ++
                    $RecomNumber ++
                    $row ++
                }
        }

}

############# Slide 28

function Slide28 {
    Write-Debug "Editing Slide 28"
    $Loop = 1
    $CurrentSlide = 28


    foreach ($Outage in $Outageslist)
        {
            if($Loop -eq 1)
                {
                    $OutageName = ($Outage.name+' - '+$Outage.properties.title)

                    $OutageService = ''
                    $OutageService = if(($Outage.properties.impact.impactedService).count -gt 1){[string]($Outage.properties.impact.impactedService | ForEach-Object {$_ + ' '})}else{[string]$Outage.properties.impact.impactedService}

                    $HTML = New-Object -Com "HTMLFile"
                    $HTML.write([ref]$Outage.properties.description)
                    $OutageDescription = $Html.body.innerText

                    $SplitDescription = $OutageDescription.split('How can we make our incident communications more useful?').split('How can customers make incidents like this less impactful?').split('How are we making incidents like this less likely or less impactful?').split('How did we respond?').split('What went wrong and why?').split('What happened?')
                    $Slide28 = $pres.Slides | Where-Object {$_.SlideIndex -eq 28}

                    $TargetShape = ($Slide28.Shapes | Where-Object {$_.Id -eq 4})
                    $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE
                    #$TargetShape.Delete()

                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(1).Text = $OutageName
                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(2).Text = "What happened:"
                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(3).Text = ($SplitDescription[1]).Split([Environment]::NewLine)[1]
                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(2).Copy()
                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(4).Paste() | Out-Null
                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(4).Text = "Impacted Service:"
                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(3).Copy()
                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(5).Paste() | Out-Null
                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(5).Text = $OutageService
                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(4).Copy()
                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(6).Paste() | Out-Null
                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(6).Text = "How can customers make incidents like this less impactful:"
                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(5).Copy()
                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(7).Paste() | Out-Null
                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(7).Text = ($SplitDescription[5]).Split([Environment]::NewLine)[1]

                    while(($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs().count -gt 7)
                        {
                            ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(8).Delete()
                        }
                }
            else
                {
                    ############### NEXT 9 SLIDES

                    $OutageName = ($Outage.name+' - '+$Outage.properties.title)

                    $OutageService = ''
                    $OutageService = if(($Outage.properties.impact.impactedService).count -gt 1){[string]($Outage.properties.impact.impactedService | ForEach-Object {$_ + ' '})}else{[string]$Outage.properties.impact.impactedService}

                    $HTML = New-Object -Com "HTMLFile"
                    $HTML.write([ref]$Outage.properties.description)
                    $OutageDescription = $Html.body.innerText

                    $SplitDescription = $OutageDescription.split('How can we make our incident communications more useful?').split('How can customers make incidents like this less impactful?').split('How are we making incidents like this less likely or less impactful?').split('How did we respond?').split('What went wrong and why?').split('What happened?')

                    $CustomLayout = $Slide28.CustomLayout
                    $pres.Slides.addSlide($CurrentSlide,$customLayout) | Out-Null

                    $NextSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $CurrentSlide}

                    ($Slide28.Shapes | Where-Object {$_.Id -eq 6}).TextFrame.TextRange.Copy()

                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 2}).TextFrame.TextRange.Paste() | Out-Null

                    ($Slide28.Shapes | Where-Object {$_.Id -eq 4}).Copy()

                    $NextSlide.Shapes.Paste() | Out-Null

                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).Copy()

                    $NextSlide.Shapes.Paste() | Out-Null

                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(1).Text = $OutageName
                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(2).Text = "What happened:"
                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(3).Text = ($SplitDescription[1]).Split([Environment]::NewLine)[1]
                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(2).Copy()
                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(4).Paste() | Out-Null
                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(4).Text = "Impacted Service:"
                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(3).Copy()
                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(5).Paste() | Out-Null
                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(5).Text = $OutageService
                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(4).Copy()
                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(6).Paste() | Out-Null
                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(6).Text = "How can customers make incidents like this less impactful:"
                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(5).Copy()
                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(7).Paste() | Out-Null
                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(7).Text = ($SplitDescription[5]).Split([Environment]::NewLine)[1]
                    
                    ($Slide28.Shapes | Where-Object {$_.Id -eq 31}).Copy()

                    $NextSlide.Shapes.Paste() | Out-Null

                    while(($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs().count -gt 7)
                        {
                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(8).Delete()
                        }
                }
                $Loop ++
                $CurrentSlide ++
        }
    

}



function WordCore {
    Write-Debug 'Editing Word Core File'
    $MatchCase = $false
    $MatchWholeWord = $true
    $MatchWildcards = $false
    $MatchSoundsLike = $false
    $MatchAllWordForms = $false
    $Forward = $true
    $wrap = $wdFindContinue
    $wdFindContinue = 1
    $Format = $false
    $ReplaceAll = 2

    $FindText = '[Workload Name]'
    $ReplaceWith = $WorkloadName
    $Global:Document.Content.Find.Execute($FindText, $MatchCase, $MatchWholeWord, $MatchWildcards, $MatchSoundsLike, $MatchAllWordForms, $Forward, $wrap, $Format, $ReplaceWith, $ReplaceAll) | Out-Null

    $FindText = 'Workload Name'
    $ReplaceWith = $WorkloadName
    $Global:Document.Content.Find.Execute($FindText, $MatchCase, $MatchWholeWord, $MatchWildcards, $MatchSoundsLike, $MatchAllWordForms, $Forward, $wrap, $Format, $ReplaceWith, $ReplaceAll) | Out-Null

    $FindText = '[Customer Name]'
    $ReplaceWith = $CustomerName
    $Global:Document.Content.Find.Execute($FindText, $MatchCase, $MatchWholeWord, $MatchWildcards, $MatchSoundsLike, $MatchAllWordForms, $Forward, $wrap, $Format, $ReplaceWith, $ReplaceAll) | Out-Null

    $FindText = '[Type Customer Name Here]'
    $ReplaceWith = $CustomerName
    $Global:Document.Content.Find.Execute($FindText, $MatchCase, $MatchWholeWord, $MatchWildcards, $MatchSoundsLike, $MatchAllWordForms, $Forward, $wrap, $Format, $ReplaceWith, $ReplaceAll) | Out-Null
    $Global:Document.Sections(1).Headers(1).Range.Find.Execute($FindText, $MatchCase, $MatchWholeWord, $MatchWildcards, $MatchSoundsLike, $MatchAllWordForms, $Forward, $wrap, $Format, $ReplaceWith, $ReplaceAll) | Out-Null


    # Total Recommendations
    $Global:Document.Content.Paragraphs(145).Range.Text = [string]($ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0}).count
    #High Impact
    $Global:Document.Content.Paragraphs(155).Range.Text = [string]($ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'High'}).count
    #Medium Impact
    $Global:Document.Content.Paragraphs(157).Range.Text = [string]($ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'Medium'}).count
    #Low Impact
    $Global:Document.Content.Paragraphs(159).Range.Text = [string]($ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'Low'}).count
    #Impacted Resources
    $Global:Document.Content.Paragraphs(165).Range.Text = [string]($ExcelContent.id | Where-Object {![string]::IsNullOrEmpty($_)} | Select-Object -Unique).count


    $HealthHigh = $ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 1 -and $_.Impact -eq 'High' -and $_.'Health / Risk' -eq 'Health'} | Sort-Object -Property "Number of Impacted Resources?" -Descending

    $RiskHigh = $ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 1 -and $_.Impact -eq 'High' -and $_.'Health / Risk' -eq 'Risk'} | Sort-Object -Property "Number of Impacted Resources?" -Descending

    #Risk Assessment Result
    $Global:Document.Content.Paragraphs(176).Range.Text = ''
    $Global:Document.Content.Paragraphs(175).Range.Text = ''

    #$Global:Document.Content.Paragraphs(158).Range.ListFormat.ApplyListTemplate($Global:Word.Application.ListGalleries[1].ListTemplates[3])
    $Global:Document.Content.Paragraphs(175).Range.Select()
    $Loops = 1
    Foreach($Risk in $RiskHigh)
        {
            if([string]::IsNullOrEmpty($Risk))
                {
                    $Global:Document.Content.Paragraphs(175).Range.Text = ''
                }
            $Title = $Risk.'Recommendation Title'
            if($Loops -eq 1)
                {
                    $Global:Word.Selection.TypeText($Title) | Out-Null
                }
            else
                {
                    $Global:Word.Selection.TypeParagraph() | Out-Null
                    $Global:Word.Selection.TypeText($Title) | Out-Null
                }
            $Loops ++
            
        }

        #Health Assessment Result
        $Global:Document.Content.Paragraphs(172).Range.Text = ''

        #$Global:Document.Content.Paragraphs(158).Range.ListFormat.ApplyListTemplate($Global:Word.Application.ListGalleries[1].ListTemplates[3])
        $Global:Document.Content.Paragraphs(171).Range.Select()
        $Loops = 1
        Foreach($Risk in $HealthHigh)
            {
                if([string]::IsNullOrEmpty($Risk))
                    {
                        $Global:Document.Content.Paragraphs(171).Range.Text = ''
                    }
                $Title = $Risk.'Recommendation Title'
                if($Loops -eq 1)
                    {
                        $Global:Word.Selection.TypeText($Title) | Out-Null
                    }
                else
                    {
                        $Global:Word.Selection.TypeParagraph() | Out-Null
                        $Global:Word.Selection.TypeText($Title) | Out-Null
                    }
                $Loops ++
            }

}
function WordCharts {
    Write-Debug 'Editing Word Charts'
    #Charts
    $WS2 = $Global:Ex.Worksheets | Where-Object { $_.Name -eq 'Charts' }

    $Position = $Global:Document.Content.Paragraphs(181).Range.Start

    $Global:Document.Content.InlineShapes(10).Delete() | Out-Null
    $Global:Document.Content.InlineShapes(9).Delete() | Out-Null
    $Global:Document.Content.InlineShapes(8).Delete() | Out-Null

    $WS2.ChartObjects('ChartP0').copy()

    $Global:Document.Range($Position,$Position).Select()
    $Global:Word.Selection.Paste() | Out-Null

    #$Global:Word.Selection.InsertParagraphAfter()

    $WS2.ChartObjects('ChartP1').copy()
    $Global:Word.Selection.Paste() | Out-Null

    #$Global:Word.Selection.InsertParagraphAfter()

    $WS2.ChartObjects('ChartP2').copy()
    $Global:Word.Selection.Paste() | Out-Null

    #$Global:Word.Selection.InsertParagraphAfter()
}
function WordOutages {
    Write-Debug 'Editing Outages'
    $Global:Document.Tables(10).Rows(2).Cells(1).Range.Text = ''
    $Global:Document.Tables(10).Rows(2).Cells(2).Range.Text = ''
    $Global:Document.Tables(10).Rows(2).Cells(3).Range.Text = ''

    Write-Debug 'Looping Outages'
    $LineCounter = 2
    foreach ($Outage in $Outageslist)
            {
                if($LineCounter -gt 3)
                    {
                        $Global:Document.Tables(10).Rows.Add() | Out-Null
                    }
                $OutageName = ($Outage.name+' - '+$Outage.properties.title)

                $HTML = New-Object -Com "HTMLFile"
                $HTML.write([ref]$Outage.properties.description)
                $OutageDescription = $Html.body.innerText

                $SplitDescription = $OutageDescription.split('How can we make our incident communications more useful?').split('How can customers make incidents like this less impactful?').split('How are we making incidents like this less likely or less impactful?').split('How did we respond?').split('What went wrong and why?').split('What happened?')

                $Global:Document.Tables(10).Rows($LineCounter).Cells(1).Range.Text = $OutageName
                $Global:Document.Tables(10).Rows($LineCounter).Cells(2).Range.Text = ($SplitDescription[1]).Split([Environment]::NewLine)[1]
                $Global:Document.Tables(10).Rows($LineCounter).Cells(3).Range.Text = ($SplitDescription[5]).Split([Environment]::NewLine)[1]
            
                $LineCounter ++
            }

}
function WordTables {
    Write-Debug 'Editing Tables'
    #Clean the table 6
    $row = 2
    while ($row -lt 5)
        {
            $cell = 1
            while($cell -lt 5)
                {
                    $Global:Document.Tables(6).Rows($row).Cells($cell).Range.Text = ''
                    $Cell ++
                }
            $row ++
        }

    #Clean the table 7
    $row = 2
    while ($row -lt 3)
        {
            $cell = 1
            while($cell -lt 5)
                {
                    $Global:Document.Tables(7).Rows($row).Cells($cell).Range.Text = ''
                    $Cell ++
                }
            $row ++
        }

    #Clean the table 8
    $row = 2
    while ($row -lt 3)
        {
            $cell = 1
            while($cell -lt 5)
                {
                    $Global:Document.Tables(8).Rows($row).Cells($cell).Range.Text = ''
                    $Cell ++
                }
            $row ++
        }

    #Populate Table Health and Risk Summary High
    $counter = 1
    $row = 2
    foreach($Impact in $HighImpact)
        {
            if ($counter -lt 14)
                {
                    #Number
                    $Global:Document.Tables(6).Rows($row).Cells(1).Range.Text = [string]$counter
                    #Recommendation
                    $Global:Document.Tables(6).Rows($row).Cells(2).Range.Text = $Impact.'Recommendation Title'
                    #Service
                    if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                        {
                            $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                        }
                    else
                        {
                            $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                        }
                        $Global:Document.Tables(6).Rows($row).Cells(3).Range.Text = $ServiceName
                    #Impacted Resources
                    $Global:Document.Tables(6).Rows($row).Cells(4).Range.Text = [string]$Impact.'Number of Impacted Resources?'
                    $counter ++
                    $row ++
                }
            else
                {
                    $Global:Document.Tables(6).Rows.add() | Out-Null
                    #Number
                    $Global:Document.Tables(6).Rows($row).Cells(1).Range.Text = [string]$counter
                    #Recommendation
                    $Global:Document.Tables(6).Rows($row).Cells(2).Range.Text = $Impact.'Recommendation Title'
                    #Service
                    if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                        {
                            $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                        }
                    else
                        {
                            $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                        }
                        $Global:Document.Tables(6).Rows($row).Cells(3).Range.Text = $ServiceName
                    #Impacted Resources
                    $Global:Document.Tables(6).Rows($row).Cells(4).Range.Text = [string]$Impact.'Number of Impacted Resources?'
                    $counter ++
                    $row ++
                }
        }

    #Populate Table Health and Risk Summary Medium
    $counter = 1
    $row = 2
    foreach($Impact in $MediumImpact)
        {
            if ($counter -lt 14)
                {
                    #Number
                    $Global:Document.Tables(7).Rows($row).Cells(1).Range.Text = [string]$counter
                    #Recommendation
                    $Global:Document.Tables(7).Rows($row).Cells(2).Range.Text = $Impact.'Recommendation Title'
                    #Service
                    if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                        {
                            $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                        }
                    else
                        {
                            $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                        }
                        $Global:Document.Tables(7).Rows($row).Cells(3).Range.Text = $ServiceName
                    #Impacted Resources
                    $Global:Document.Tables(7).Rows($row).Cells(4).Range.Text = [string]$Impact.'Number of Impacted Resources?'
                    $counter ++
                    $row ++
                }
            else
                {
                    $Global:Document.Tables(7).Rows.add() | Out-Null
                    #Number
                    $Global:Document.Tables(7).Rows($row).Cells(1).Range.Text = [string]$counter
                    #Recommendation
                    $Global:Document.Tables(7).Rows($row).Cells(2).Range.Text = $Impact.'Recommendation Title'
                    #Service
                    if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                        {
                            $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                        }
                    else
                        {
                            $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                        }
                        $Global:Document.Tables(7).Rows($row).Cells(3).Range.Text = $ServiceName
                    #Impacted Resources
                    $Global:Document.Tables(7).Rows($row).Cells(4).Range.Text = [string]$Impact.'Number of Impacted Resources?'
                    $counter ++
                    $row ++
                }
        }

    #Populate Table Health and Risk Summary Low
    $counter = 1
    $row = 2
    foreach($Impact in $LowImpact)
        {
            if ($counter -lt 14)
                {
                    #Number
                    $Global:Document.Tables(8).Rows($row).Cells(1).Range.Text = [string]$counter
                    #Recommendation
                    $Global:Document.Tables(8).Rows($row).Cells(2).Range.Text = $Impact.'Recommendation Title'
                    #Service
                    if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                        {
                            $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                        }
                    else
                        {
                            $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                        }
                        $Global:Document.Tables(8).Rows($row).Cells(3).Range.Text = $ServiceName
                    #Impacted Resources
                    $Global:Document.Tables(8).Rows($row).Cells(4).Range.Text = [string]$Impact.'Number of Impacted Resources?'
                    $counter ++
                    $row ++
                }
            else
                {
                    $Global:Document.Tables(8).Rows.add() | Out-Null
                    #Number
                    $Global:Document.Tables(8).Rows($row).Cells(1).Range.Text = [string]$counter
                    #Recommendation
                    $Global:Document.Tables(8).Rows($row).Cells(2).Range.Text = $Impact.'Recommendation Title'
                    #Service
                    if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                        {
                            $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                        }
                    else
                        {
                            $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                        }
                        $Global:Document.Tables(8).Rows($row).Cells(3).Range.Text = $ServiceName
                    #Impacted Resources
                    $Global:Document.Tables(8).Rows($row).Cells(4).Range.Text = [string]$Impact.'Number of Impacted Resources?'
                    $counter ++
                    $row ++
                }
        }
}


#Call the functions
Write-Debug "Version"
$Version = 2.1.0

if ($Help.IsPresent) {
    Help
    Exit
}
if ($IncludeOutages.IsPresent)
    {
        OutagesData
    }
Excel
PPT
Write-Host "Editing " -NoNewline
Write-Host "PowerPoint" -BackgroundColor DarkRed -NoNewline
Write-Host " "
Slide1
Slide12
Slide16
Slide17
if ($IncludeOutages.IsPresent)
    {
        Slide28
    }
Slide25
Slide24
Slide23


$PPTFinalFile = ($PSScriptRoot+'\Executive Summary Presentation - ' + $CustomerName + ' - '+ (get-date -Format "yyyy-MM-dd-HH-mm") +'.pptx')
$Global:pres.SaveAs($PPTFinalFile)
#$pres.Save()
$Global:pres.Close()
$Global:Application.Quit()
Get-Process -Name "POWERPNT" -ErrorAction Ignore | Where-Object { $_.CommandLine -like '*/automation*' } | Stop-Process


if ($WordTemplateFile)
    {
        Word
        Write-Host "Editing " -NoNewline
        Write-Host "Word" -BackgroundColor DarkBlue -NoNewline
        Write-Host " "
        WordCharts
        WordCore
        if ($IncludeOutages.IsPresent)
            {
                WordOutages
            }
        WordTables
    }

################ Finishing

Write-Debug "Closing Excel"
$Global:Ex.Save()
$Global:Ex.Close()
$Global:ExcelApplication.Quit()
# Ensures the Excel process opened by the API is closed
Get-Process -Name "excel" -ErrorAction Ignore | Where-Object { $_.CommandLine -like '*/automation*' } | Stop-Process

Write-Host 'PowerPoint File Saved As: ' -NoNewline
Write-Host $PPTFinalFile -ForegroundColor Cyan

if ($WordTemplateFile)
    {
        $WordFinalFile = ($PSScriptRoot+'\Assessment Report - ' + $CustomerName + ' - '+ (get-date -Format "yyyy-MM-dd-HH-mm") +'.docx')        
        $Global:Document.SaveAs($WordFinalFile)
        Write-Host 'Word File Saved As: ' -NoNewline
        Write-Host $WordFinalFile -ForegroundColor Cyan
        $Global:Document.Close()
        $Global:Word.Quit()
        Get-Process -Name "WINWORD" -ErrorAction Ignore | Where-Object { $_.CommandLine -like '*/automation*' } | Stop-Process
    }
