#Requires -Version 7

<#
.SYNOPSIS
Well-Architected Reliability Assessment Report Generator Script

.DESCRIPTION
The script "3_wara_reports_generator" processes the Excel file created by the "2_wara_data_analyzer" script and generates the final PowerPoint and Word reports for the Well-Architected Reliability Assessment.

.PARAMETER Help
Switch to display help information.

.PARAMETER Debugging
Switch to enable debugging mode.

.PARAMETER CustomerName
Name of the customer for whom the report is being generated.

.PARAMETER WorkloadName
Name of the workload being assessed.

.PARAMETER ExcelFile
Path to the Excel file created by the "2_wara_data_analyzer" script.

.PARAMETER Heavy
Switch to enable heavy processing mode. When enabled, this mode introduces additional delays using Start-Sleep at various points in the script to handle heavy environments more gracefully. This can help in scenarios where the system resources are limited or the operations being performed are resource-intensive, ensuring the script doesn't overwhelm the system.

.PARAMETER PPTTemplateFile
Path to the PowerPoint template file.

.PARAMETER WordTemplateFile
Path to the Word template file.

.EXAMPLE
.\3_wara_reports_generator.ps1 -ExcelFile 'C:\WARA_Script\WARA Action Plan 2024-03-07_16_06.xlsx' -CustomerName 'ABC Customer' -WorkloadName 'SAP On Azure' -Heavy -PPTTemplateFile 'C:\Templates\Template.pptx' -WordTemplateFile 'C:\Templates\Template.docx'

.LINK
https://github.com/Azure/Azure-Proactive-Resiliency-Library-v2
#>

Param(
  [switch]$Help,
  [switch] $Debugging,
  [string] $CustomerName,
  [string] $WorkloadName,
  [Parameter(mandatory = $true)]
  [string] $ExcelFile,
  [string] $PPTTemplateFile,
  [string] $WordTemplateFile
)


if ($Debugging.IsPresent)
        {
            $DebugPreference = 'Continue'
            $ErrorActionPreference = 'Continue'
        }
    else
        {
            $ErrorActionPreference = "silentlycontinue"
        }

if (!$PPTTemplateFile) {
  if ((Test-Path -Path ($PSScriptRoot + '\Mandatory - Executive Summary presentation - Template.pptx') -PathType Leaf) -eq $true) {
    $PPTTemplateFile = ($PSScriptRoot + '\Mandatory - Executive Summary presentation - Template.pptx')
  }
  else {
    Write-Host "This script requires specific Microsoft PowerPoint and Word templates, only available to Microsoft Cloud Solution Architects at this moment. If you are participating on a Well-Architected Reliability Assessment, reach out to the CSA coordinating the engagement."
    Exit
  }
}

if (!$WordTemplateFile) {
  if ((Test-Path -Path ($PSScriptRoot + '\Optional - Assessment Report - Template.docx') -PathType Leaf) -eq $true) {
    $WordTemplateFile = ($PSScriptRoot + '\Optional - Assessment Report - Template.docx')
  }
  else {
    Write-Host "This script requires specific Microsoft PowerPoint and Word templates, only available to Microsoft Cloud Solution Architects at this moment. If you are participating on a Well-Architected Reliability Assessment, reach out to the CSA coordinating the engagement."
    Exit
  }
}

if (!$CustomerName) {
  $CustomerName = '[Customer Name]'
}

if (!$WorkloadName) {
  $WorkloadName = '[Workload Name]'
}

function Help {
  Write-Host ""
  Write-Host "Parameters"
  Write-Host ""
  Write-Host " -ExcelFile            :  Mandatory; WARA Excel file generated by '2_wara_data_analyzer.ps1' script and customized."
  Write-Host " -CustomerName         :  Optional; specifies the Name of the Customer to be added to the PPTx and DOCx files. "
  Write-Host " -WorkloadName         :  Optional; specifies the Name of the Workload of the analyses to be added to the PPTx and DOCx files. "
  Write-Host " -PPTTemplateFile      :  Optional; specifies the PPTx template file to be used as source. If not specified the script will look for the file in the same path as the script. "
  Write-Host " -WordTemplateFile     :  Optional; specifies the DOCx template file to be used as source. If not specified the script will look for the file in the same path as the script. "
  Write-Host " -Debugging            :  Writes a Debugging information to a log file. "
  Write-Host ""
  Write-Host "Examples: "
  Write-Host ""
  Write-Host "  Running with Customer details"
  Write-Host "  .\3_wara_reports_generator.ps1 -ExcelFile 'C:\WARA_Script\WARA Action Plan 2024-03-07_16_06.xlsx' -CustomerName 'ABC Customer' -WorkloadName 'SAP On Azure'"
  Write-Host ""
  Write-Host ""
  Write-Host "  Running without Customer details"
  Write-Host "  .\3_wara_reports_generator.ps1 -ExcelFile 'C:\WARA_Script\WARA Action Plan 2024-03-07_16_06.xlsx'"
  Write-Host ""
  Write-Host ""
}

$Runtime = Measure-Command -Expression {

  function Requirements {
    # Install required modules
    Write-Host "Validating " -NoNewline
    Write-Host "ImportExcel" -ForegroundColor Cyan -NoNewline
    Write-Host " Module.."
    $ImportExcel = Get-Module -Name ImportExcel -ListAvailable -ErrorAction silentlycontinue
    if ($null -eq $ImportExcel) {
      Write-Host "Installing ImportExcel Module" -ForegroundColor Yellow
      Install-Module -Name ImportExcel -Force -SkipPublisherCheck
    }
  }

  ######################## REGULAR Functions ##########################
  function LocalFiles {
    # Define script path as the default path to save files
      $workingFolderPath = $PSScriptRoot
      Set-Location -path $workingFolderPath;
      $clonePath = "$workingFolderPath\Azure-Proactive-Resiliency-Library"
      Write-Debug "Checking the version of the script"
      $RepoVersion = Get-Content -Path "$clonePath\tools\Version.json" -ErrorAction SilentlyContinue | ConvertFrom-Json
      if ($Version -ne $RepoVersion.Generator) {
        Write-Host "This version of the script is outdated. " -BackgroundColor DarkRed
        Write-Host "Please use a more recent version of the script." -BackgroundColor DarkRed
      }
      else {
        Write-Host "This version of the script is current version. " -BackgroundColor DarkGreen
      }

  }

  function Get-ExcelCore {
    Param($ExcelFile)

    try {
      $ExcelCore = Import-Excel -Path $ExcelFile
    }
    catch {
      $errorMessage = $_.Exception
      $ErrorStack = $_.ScriptStackTrace
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Error - ' + $errorMessage)
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Error - ' + $ErrorStack)
      Write-Error "Excel File not found.."
      Exit
    }

    return $ExcelCore
  }

  function Get-ExcelContent {
    Param($ExcelFile)

    $ExcelContent = Import-Excel -Path $ExcelFile -WorksheetName ImpactedResources

    return $ExcelContent
  }

  function Get-ExcelContentRecommnedation {
    Param($ExcelFile)

    $ExcelRecommendations = Import-Excel -Path $ExcelFile -WorksheetName Recommendations

    return $ExcelRecommendations
  }

  function Get-ExcelOutage {
    Param($ExcelFile)

    try {
      $Outages = Import-Excel -Path $ExcelFile -WorksheetName Outages
    }
    catch {
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Outages not found in the Excel File..')
    }

    return $Outages

  }

  function Get-ExcelTicket {
    Param($ExcelFile)

    try {
      $SupportTickets = Import-Excel -Path $ExcelFile -WorksheetName "Support Tickets" -AsText 'Ticket ID'
    }
    catch {
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Support Tickets not found in the Excel File..')
    }

    return $SupportTickets
  }

  function Get-ExcelServiceHealth {
    Param($ExcelFile)

    try {
      $ServiceHealth = Import-Excel -Path $ExcelFile -WorksheetName "Health Alerts"
    }
    catch {
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Service Health Alerts not found in the Excel File..')
    }

    return $ServiceHealth

  }

  function Get-ExcelRetirement {
    Param($ExcelFile)

    try {
      $Retirements = Import-Excel -Path $ExcelFile -WorksheetName "Retirements"
    }
    catch {
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Service Retirements not found in the Excel File..')
    }

    return $Retirements

  }

  function Get-ExcelResource {
    Param($ResourceIDs)

    $Resources = @()
    Foreach ($ID in $ResourceIDs) {
      if (![string]::IsNullOrEmpty($ID)) {
        $obj = @{
          'ID'             = $ID;
          'Subscription'   = $ID.split('/')[2];
          'Resource Group' = $ID.split('/')[4];
          'Resource Type'  = ($ID.split('/')[6] + '/' + $ID.split('/')[7])
        }
        $Resources += $obj
      }
    }
    return $Resources
  }

  function Build-SummaryActionPlan {
    Param($ExcelRecommendations)

    $Recommendations = $ExcelRecommendations | Where-Object {$_.'Number of Impacted Resources?' -gt 0}

    $CXSummaryArray = Foreach ($Recommendation in $Recommendations)
      {
        $tmp = [PSCustomObject]@{
          'Recommendation title'      = $Recommendation.'Recommendation Title'
          'Description'               = $Recommendation.'Best Practices Guidance'
          'Priority'                  = $Recommendation.Impact
          'Internal Status'           = ""
          'Internal Status Reason'    = ""
          'Customer-facing annotation'= ""
          'Internal-facing note'      = ""
          'Potential benefit'         = ""
          'Resource Type'             = ($Recommendation.'Azure Service Category / Well-Architected Area' + '/' + $Recommendation.'Azure Service / Well-Architected Topic')
        }
        $tmp
      }

    return $CXSummaryArray

  }

  ######################## PPT Functions ##########################

  ############# Slide 1
  function Build-PPTSlide1 {
    Param($Presentation,$CustomerName,$WorkloadName,$Debugging)
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Removing Slide 1..')

    ($Presentation.Slides | Where-Object { $_.SlideIndex -eq 1 }).Delete()

    $Slide1 = $Presentation.Slides | Where-Object { $_.SlideIndex -eq 1 }

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Slide 1 - Adding Customer name: ' + $CustomerName + '. And Workload name: ' + $WorkloadName)
    ($Slide1.Shapes | Where-Object { $_.Id -eq 5 }).TextFrame.TextRange.Text = ($CustomerName + ' - ' + $WorkloadName)
  }

  ############# SLide 12
  function Build-PPTSlide12 {
    Param($Presentation,$AUTOMESSAGE,$WorkloadName,$ResourcesType,$Debugging)
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 12 - Workload Summary..')

    $Slide12 = $Presentation.Slides | Where-Object { $_.SlideIndex -eq 12 }

    $TargetShape = ($Slide12.Shapes | Where-Object { $_.Id -eq 9 })
    $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE

    $TargetShape = ($Slide12.Shapes | Where-Object { $_.Id -eq 8 })
    $TargetShape.Delete()

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 12 - Adding Workload name: ' + $WorkloadName)
    ($Slide12.Shapes | Where-Object { $_.Id -eq 3 }).TextFrame.TextRange.Text = ('During the engagement, the Workload ' + $WorkloadName + ' has been reviewed. The solution is hosted in two Azure regions, and runs mainly IaaS resources, with some PaaS resources, which includes but is not limited to:')

    $loop = 1
    foreach ($ResourcesType in $ResourcesTypes) {
      $LogResName = $ResourcesType.Name
      $LogResCount = $ResourcesType.'Count'
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 12 - Adding Resource Type: ' + $LogResName + '. Count: ' + $LogResCount)
      if ($loop -eq 1) {
        $ResourceTemp = ($ResourcesType.Name + ' (' + $ResourcesType.'Count' + ')')
        ($Slide12.Shapes | Where-Object { $_.Id -eq 6 }).Table.Columns(1).Width = 685
        ($Slide12.Shapes | Where-Object { $_.Id -eq 6 }).Table.Rows(1).Cells(1).Shape.TextFrame.TextRange.Text = $ResourceTemp
        ($Slide12.Shapes | Where-Object { $_.Id -eq 6 }).Table.Rows(1).Height = 20
      }
      else {
        $ResourceTemp = ($ResourcesType.Name + ' (' + $ResourcesType.'Count' + ')')
        ($Slide12.Shapes | Where-Object { $_.Id -eq 6 }).Table.Rows.Add() | Out-Null
        ($Slide12.Shapes | Where-Object { $_.Id -eq 6 }).Table.Rows($loop).Cells(1).Shape.TextFrame.TextRange.Text = $ResourceTemp
      }
      $loop ++
    }
  }

  ############# Slide 16
  function Build-PPTSlide16 {
    Param($Presentation,$AUTOMESSAGE,$ServiceHighImpact,$WAFHighImpact,$ExcelCore,$ExcelContent,$Debugging)
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 16 - Health and Risk Dashboard..')

    $Slide16 = $Presentation.Slides | Where-Object { $_.SlideIndex -eq 16 }

    $TargetShape = ($Slide16.Shapes | Where-Object { $_.Id -eq 41 })
    $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE

    $count = 1
    foreach ($Impact in $ServiceHighImpact) {
      $LogImpactName = $Impact.'Recommendation Title'
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 16 - Adding Service High Impact Name: ' + $LogImpactName)
      if ($count -lt 5) {
          ($Slide16.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs($count).text = $Impact.'Recommendation Title'
        $count ++
      }
    }

    while (($Slide16.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs().count -gt 5) {
      ($Slide16.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs(6).Delete()
    }

    if ($WAFHighImpact.count -ne 0) {
      $count = 1
      foreach ($Impact in $WAFHighImpact) {
        $LogWAFImpactName = $Impact.'Recommendation Title'
        Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 16 - Adding WAF High Impact: ' + $LogWAFImpactName)
        if ($count -lt 5) {
          ($Slide16.Shapes | Where-Object { $_.Id -eq 12 }).TextFrame.TextRange.Paragraphs($count).text = $Impact.'Recommendation Title'
          $count ++
        }
      }
    }
    else {
      ($Slide16.Shapes | Where-Object { $_.Id -eq 12 }).TextFrame.TextRange.Text = ' '
    }

    while (($Slide16.Shapes | Where-Object { $_.Id -eq 12 }).TextFrame.TextRange.Paragraphs().count -gt 5) {
      ($Slide16.Shapes | Where-Object { $_.Id -eq 12 }).TextFrame.TextRange.Paragraphs(6).Delete()
    }

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 16 - Adding general values...')
    #Total Recomendations
    ($Slide16.Shapes | Where-Object { $_.Id -eq 44 }).GroupItems[3].TextFrame.TextRange.Text = [string]($ExcelCore | Where-Object { $_."Number of Impacted Resources?" -gt 0 }).count
    #High Impact
    ($Slide16.Shapes | Where-Object { $_.Id -eq 44 }).GroupItems[4].TextFrame.TextRange.Text = [string]($ExcelCore | Where-Object { $_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'High' }).count
    #Medium Impact
    ($Slide16.Shapes | Where-Object { $_.Id -eq 44 }).GroupItems[5].TextFrame.TextRange.Text = [string]($ExcelCore | Where-Object { $_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'Medium' }).count
    #Low Impact
    ($Slide16.Shapes | Where-Object { $_.Id -eq 44 }).GroupItems[6].TextFrame.TextRange.Text = [string]($ExcelCore | Where-Object { $_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'Low' }).count
    #Impacted Resources
    ($Slide16.Shapes | Where-Object { $_.Id -eq 44 }).GroupItems[7].TextFrame.TextRange.Text = [string]($ExcelContent.id | Where-Object { ![string]::IsNullOrEmpty($_) } | Select-Object -Unique).count
  }

  ############# Slide 17
  function Build-PPTSlide17 {
    Param($Presentation,$AUTOMESSAGE,$Ex,$Debugging)
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 17 - Health and Risk Dashboard..')

    $Slide17 = $Presentation.Slides | Where-Object { $_.SlideIndex -eq 17 }

    $TargetShape = ($Slide17.Shapes | Where-Object { $_.Id -eq 41 })
    $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 17 - Looking Charts in Excel File...')
    $WS2 = $Ex.Worksheets | Where-Object { $_.Name -eq 'Charts' }

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 17 - Replacing Chart 1..')
    #Copy Excel Chart0
    ($Slide17.Shapes | Where-Object { $_.Id -eq 3 }).Chart.Delete()
    Start-Sleep -Milliseconds 100
    $WS2.ChartObjects('ChartP0').copy()
    Start-Sleep -Milliseconds 100
    $Slide17.Shapes.Paste() | Out-Null
    Start-Sleep 2
    foreach ($Shape in $Slide17.Shapes) {
      if ($Shape.Name -eq 'ChartP0') {
        $Shape.IncrementLeft(240)
      }
    }

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 17 - Replacing Chart 2..')
    #Copy Excel Chart1
    ($Slide17.Shapes | Where-Object { $_.Id -eq 5 }).Chart.Delete()
    Start-Sleep -Milliseconds 100
    $WS2.ChartObjects('ChartP1').copy()
    Start-Sleep -Milliseconds 100
    $Slide17.Shapes.Paste() | Out-Null
    Start-Sleep 2
    foreach ($Shape in $Slide17.Shapes) {
      if ($Shape.Name -eq 'ChartP1') {
        $Shape.IncrementLeft(-260)
        $Shape.IncrementTop(45)
      }
    }

  }

  ############# Slide 21
  function Build-PPTSlide21 {
    Param($Presentation,$AUTOMESSAGE,$ServiceHealth,$Debugging)
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 21 - Service Health Alerts..')

    $FirstSlide = 21
    $TableID = 6
    $CurrentSlide = $Presentation.Slides | Where-Object { $_.SlideIndex -eq $FirstSlide }
    $CoreSlide = $Presentation.Slides | Where-Object { $_.SlideIndex -eq $FirstSlide }

    $TargetShape = ($CurrentSlide.Shapes | Where-Object { $_.Id -eq 41 })
    $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 21 - Cleaning Table..')
    $row = 3
    while ($row -lt 2) {
      $cell = 1
      while ($cell -lt 9) {
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells($cell).Shape.TextFrame.TextRange.Text = ''
        $Cell ++
      }
      $row ++
    }

    $Counter = 1
    $row = 3
    foreach ($Health in $ServiceHealth) {
      $LogHealthName = $Health.Name
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 21 - Adding Service Health Alert: ' + $LogHealthName)
      if ($Counter -lt 17) {
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$Health.Subscription
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = [string]$Health.Name
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = if ($Health.Services -eq 'All') { 'Yes' }else { 'No' }
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = if ($Health.Regions -eq 'All') { 'Yes' }else { 'No' }
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(5).Shape.TextFrame.TextRange.Text = if ($Health.'Event Type' -like '*Service Issues*' -or $Health.'Event Type' -eq 'All') { 'Yes' }else { 'No' }
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(6).Shape.TextFrame.TextRange.Text = if ($Health.'Event Type' -like '*Planned Maintenance*' -or $Health.'Event Type' -eq 'All') { 'Yes' }else { 'No' }
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(7).Shape.TextFrame.TextRange.Text = if ($Health.'Event Type' -like '*Health Advisories*' -or $Health.'Event Type' -eq 'All') { 'Yes' }else { 'No' }
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(8).Shape.TextFrame.TextRange.Text = if ($Health.'Event Type' -like '*Security Advisory*' -or $Health.'Event Type' -eq 'All') { 'Yes' }else { 'No' }
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(9).Shape.TextFrame.TextRange.Text = ' '
        $counter ++
        $row ++
      }
      else {
        Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 21 - Creating new slide for Service Health Alerts..')
        $Counter = 1
        $CustomLayout = $CurrentSlide.CustomLayout
        $FirstSlide ++
        $Presentation.Slides.addSlide($FirstSlide, $customLayout) | Out-Null

        $NextSlide = $Presentation.Slides | Where-Object { $_.SlideIndex -eq $FirstSlide }
        ($CoreSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Copy()
        Start-Sleep -Milliseconds 100
        ($NextSlide.Shapes | Where-Object { $_.Id -eq 2 }).TextFrame.TextRange.Paste() | Out-Null
        Start-Sleep -Milliseconds 100
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Copy()
        Start-Sleep -Milliseconds 100
        $NextSlide.Shapes.Paste() | Out-Null
        Start-Sleep -Milliseconds 100
        $TableID = 3
        ($CoreSlide.Shapes | Where-Object { $_.Id -eq 41 }).Copy()
        Start-Sleep -Milliseconds 100
        $NextSlide.Shapes.Paste() | Out-Null
        Start-Sleep -Milliseconds 100

        $rowTemp = 2
        while ($rowTemp -lt 18) {
          $cell = 1
          while ($cell -lt 5) {
            ($NextSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($rowTemp).Cells($cell).Shape.TextFrame.TextRange.Text = ''
            $Cell ++
          }
          $rowTemp ++
        }

        $CurrentSlide = $NextSlide

        $row = 3
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$Health.Subscription
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = [string]$Health.Name
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = if ($Health.Services -eq 'All') { 'Yes' }else { 'No' }
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = if ($Health.Regions -eq 'All') { 'Yes' }else { 'No' }
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(5).Shape.TextFrame.TextRange.Text = if ($Health.'Event Type' -like '*Service Issues*' -or $Health.'Event Type' -eq 'All') { 'Yes' }else { 'No' }
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(6).Shape.TextFrame.TextRange.Text = if ($Health.'Event Type' -like '*Planned Maintenance*' -or $Health.'Event Type' -eq 'All') { 'Yes' }else { 'No' }
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(7).Shape.TextFrame.TextRange.Text = if ($Health.'Event Type' -like '*Health Advisories*' -or $Health.'Event Type' -eq 'All') { 'Yes' }else { 'No' }
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(8).Shape.TextFrame.TextRange.Text = if ($Health.'Event Type' -like '*Security Advisory*' -or $Health.'Event Type' -eq 'All') { 'Yes' }else { 'No' }
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(9).Shape.TextFrame.TextRange.Text = ' '
        $Counter ++
        $row ++
      }
    }
  }

  ############# Slide 23
  function Build-PPTSlide23 {
    Param($Presentation,$AUTOMESSAGE,$HighImpact,$Debugging)
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 23 - High Impact Issues..')

    $FirstSlide = 23
    $TableID = 6
    $CurrentSlide = $Presentation.Slides | Where-Object { $_.SlideIndex -eq $FirstSlide }
    $CoreSlide = $Presentation.Slides | Where-Object { $_.SlideIndex -eq $FirstSlide }

    $TargetShape = ($CurrentSlide.Shapes | Where-Object { $_.Id -eq 41 })
    $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 23 - Cleaning Table..')
    $row = 2
    while ($row -lt 6) {
      $cell = 1
      while ($cell -lt 5) {
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells($cell).Shape.TextFrame.TextRange.Text = ''
        $Cell ++
      }
      $row ++
    }

    $Counter = 1
    $RecomNumber = 1
    $row = 2
    foreach ($Impact in $HighImpact) {
      $LogHighImpact = $Impact.'Recommendation Title'
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 23 - Adding High Impact: ' + $LogHighImpact )
      if ($Counter -lt 14) {
        #Number
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$RecomNumber
        #Recommendation
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = $Impact.'Recommendation Title'
        #Service
        if ($Impact.'Azure Service / Well-Architected' -eq 'Well Architected') {
          $ServiceName = ('WAF - ' + $Impact.'Azure Service / Well-Architected Topic')
        }
        else {
          $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
        }
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = $ServiceName
        #Impacted Resources
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = [string]$Impact.'Number of Impacted Resources?'
        $counter ++
        $RecomNumber ++
        $row ++
      }
      else {
        Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 23 - Adding new Slide..')
        $Counter = 1
        $CustomLayout = $CurrentSlide.CustomLayout
        $FirstSlide ++
        $Presentation.Slides.addSlide($FirstSlide, $customLayout) | Out-Null

        $NextSlide = $Presentation.Slides | Where-Object { $_.SlideIndex -eq $FirstSlide }
        ($CoreSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Copy()
        Start-Sleep -Milliseconds 100
        ($NextSlide.Shapes | Where-Object { $_.Id -eq 2 }).TextFrame.TextRange.Paste() | Out-Null
        Start-Sleep -Milliseconds 100
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Copy()
        Start-Sleep -Milliseconds 100
        $NextSlide.Shapes.Paste() | Out-Null
        Start-Sleep -Milliseconds 100
        $TableID = 3
        ($CoreSlide.Shapes | Where-Object { $_.Id -eq 41 }).Copy()
        Start-Sleep -Milliseconds 100
        $NextSlide.Shapes.Paste() | Out-Null
        Start-Sleep -Milliseconds 100

        Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 23 - Cleaning table of new slide..')
        $rowTemp = 2
        while ($rowTemp -lt 15) {
          $cell = 1
          while ($cell -lt 5) {
            ($NextSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($rowTemp).Cells($cell).Shape.TextFrame.TextRange.Text = ''
            $Cell ++
          }
          $rowTemp ++
        }

        $CurrentSlide = $NextSlide

        $row = 2
        #Number
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$RecomNumber
        #Recommendation
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = $Impact.'Recommendation Title'
        #Service
        if ($Impact.'Azure Service / Well-Architected' -eq 'Well Architected') {
          $ServiceName = ('WAF - ' + $Impact.'Azure Service / Well-Architected Topic')
        }
        else {
          $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
        }
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = $ServiceName
        #Impacted Resources
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = [string]$Impact.'Number of Impacted Resources?'
        $Counter ++
        $RecomNumber ++
        $row ++
      }
    }

  }

  ############# Slide 24
  function Build-PPTSlide24 {
    Param($Presentation,$AUTOMESSAGE,$MediumImpact,$Debugging)
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 24 - Medium Impact Issues..')

    $FirstSlide = 24
    $TableID = 6
    $CurrentSlide = $Presentation.Slides | Where-Object { $_.SlideIndex -eq $FirstSlide }
    $CoreSlide = $Presentation.Slides | Where-Object { $_.SlideIndex -eq $FirstSlide }

    $TargetShape = ($CurrentSlide.Shapes | Where-Object { $_.Id -eq 41 })
    $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 24 - Cleaning Table..')
    $row = 2
    while ($row -lt 6) {
      $cell = 1
      while ($cell -lt 5) {
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells($cell).Shape.TextFrame.TextRange.Text = ''
        $Cell ++
      }
      $row ++
    }

    $Counter = 1
    $RecomNumber = 1
    $row = 2
    foreach ($Impact in $MediumImpact) {
      $LogMediumImpact = $Impact.'Recommendation Title'
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 24 - Adding Medium Impact: ' + $LogMediumImpact)
      if ($Counter -lt 14) {
        #Number
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$RecomNumber
        #Recommendation
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = $Impact.'Recommendation Title'
        #Service
        if ($Impact.'Azure Service / Well-Architected' -eq 'Well Architected') {
          $ServiceName = ('WAF - ' + $Impact.'Azure Service / Well-Architected Topic')
        }
        else {
          $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
        }
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = $ServiceName
        #Impacted Resources
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = [string]$Impact.'Number of Impacted Resources?'
        $counter ++
        $RecomNumber ++
        $row ++
      }
      else {
        Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 24 - Creating new slide..')
        $Counter = 1
        $CustomLayout = $CurrentSlide.CustomLayout
        $FirstSlide ++
        $Presentation.Slides.addSlide($FirstSlide, $customLayout) | Out-Null

        $NextSlide = $Presentation.Slides | Where-Object { $_.SlideIndex -eq $FirstSlide }
        ($CoreSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Copy()
        Start-Sleep -Milliseconds 100
        ($NextSlide.Shapes | Where-Object { $_.Id -eq 2 }).TextFrame.TextRange.Paste() | Out-Null
        Start-Sleep -Milliseconds 100
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Copy()
        Start-Sleep -Milliseconds 100
        $NextSlide.Shapes.Paste() | Out-Null
        Start-Sleep -Milliseconds 100
        $TableID = 3
        ($CoreSlide.Shapes | Where-Object { $_.Id -eq 41 }).Copy()
        Start-Sleep -Milliseconds 100
        $NextSlide.Shapes.Paste() | Out-Null
        Start-Sleep -Milliseconds 100

        Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 24 - Cleaning Table of new slide..')
        $rowTemp = 2
        while ($rowTemp -lt 15) {
          $cell = 1
          while ($cell -lt 5) {
            ($NextSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($rowTemp).Cells($cell).Shape.TextFrame.TextRange.Text = ''
            $Cell ++
          }
          $rowTemp ++
        }

        $CurrentSlide = $NextSlide

        $row = 2
        #Number
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$RecomNumber
        #Recommendation
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = $Impact.'Recommendation Title'
        #Service
        if ($Impact.'Azure Service / Well-Architected' -eq 'Well Architected') {
          $ServiceName = ('WAF - ' + $Impact.'Azure Service / Well-Architected Topic')
        }
        else {
          $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
        }
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = $ServiceName
        #Impacted Resources
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = [string]$Impact.'Number of Impacted Resources?'
        $Counter ++
        $RecomNumber ++
        $row ++
      }
    }

  }

  ############# Slide 25
  function Build-PPTSlide25 {
    Param($Presentation,$AUTOMESSAGE,$LowImpact,$Debugging)
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 25 - Low Impact Issues..')

    $FirstSlide = 25
    $TableID = 6
    $CurrentSlide = $Presentation.Slides | Where-Object { $_.SlideIndex -eq $FirstSlide }
    $CoreSlide = $Presentation.Slides | Where-Object { $_.SlideIndex -eq $FirstSlide }

    $TargetShape = ($CurrentSlide.Shapes | Where-Object { $_.Id -eq 41 })
    $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 25 - Cleaning Table..')
    $row = 2
    while ($row -lt 6) {
      $cell = 1
      while ($cell -lt 5) {
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells($cell).Shape.TextFrame.TextRange.Text = ''
        $Cell ++
      }
      $row ++
    }

    $Counter = 1
    $RecomNumber = 1
    $row = 2
    foreach ($Impact in $LowImpact) {
      $LogLowImpact = $Impact.'Recommendation Title'
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 25 - Adding Low Impact: ' + $LogLowImpact)
      if ($Counter -lt 14) {
        #Number
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$RecomNumber
        #Recommendation
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = $Impact.'Recommendation Title'
        #Service
        if ($Impact.'Azure Service / Well-Architected' -eq 'Well Architected') {
          $ServiceName = ('WAF - ' + $Impact.'Azure Service / Well-Architected Topic')
        }
        else {
          $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
        }
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = $ServiceName
        #Impacted Resources
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = [string]$Impact.'Number of Impacted Resources?'
        $counter ++
        $RecomNumber ++
        $row ++
      }
      else {
        Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 25 - Creating new Slide..')
        $Counter = 1
        $CustomLayout = $CurrentSlide.CustomLayout
        $FirstSlide ++
        $Presentation.Slides.addSlide($FirstSlide, $customLayout) | Out-Null

        $NextSlide = $Presentation.Slides | Where-Object { $_.SlideIndex -eq $FirstSlide }
        ($CoreSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Copy()
        Start-Sleep -Milliseconds 100
        ($NextSlide.Shapes | Where-Object { $_.Id -eq 2 }).TextFrame.TextRange.Paste() | Out-Null
        Start-Sleep -Milliseconds 100
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Copy()
        Start-Sleep -Milliseconds 100
        $NextSlide.Shapes.Paste() | Out-Null
        Start-Sleep -Milliseconds 100
        $TableID = 3
        ($CoreSlide.Shapes | Where-Object { $_.Id -eq 41 }).Copy()
        Start-Sleep -Milliseconds 100
        $NextSlide.Shapes.Paste() | Out-Null
        Start-Sleep -Milliseconds 100

        Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 25 - Cleaning Table of new slide..')
        $rowTemp = 2
        while ($rowTemp -lt 15) {
          $cell = 1
          while ($cell -lt 5) {
            ($NextSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($rowTemp).Cells($cell).Shape.TextFrame.TextRange.Text = ''
            $Cell ++
          }
          $rowTemp ++
        }

        $CurrentSlide = $NextSlide

        $row = 2
        #Number
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$RecomNumber
        #Recommendation
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = $Impact.'Recommendation Title'
        #Service
        if ($Impact.'Azure Service / Well-Architected' -eq 'Well Architected') {
          $ServiceName = ('WAF - ' + $Impact.'Azure Service / Well-Architected Topic')
        }
        else {
          $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
        }
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = $ServiceName
        #Impacted Resources
        ($CurrentSlide.Shapes | Where-Object { $_.Id -eq $TableID }).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = [string]$Impact.'Number of Impacted Resources?'
        $Counter ++
        $RecomNumber ++
        $row ++
      }
    }

  }

  ############# Slide 28
  function Build-PPTSlide28 {
    Param($Presentation,$Outages,$AUTOMESSAGE,$Debugging)
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 28 - Recent Microsoft Outages..')

    $Loop = 1
    $CurrentSlide = 28

    if (![string]::IsNullOrEmpty($Outages)) {
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 28 - Outages found..')
      foreach ($Outage in $Outages) {
        if ($Loop -eq 1) {
          $OutageName = ($Outage.'Tracking ID' + ' - ' + $Outage.title)
          Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 28 - Adding Outage: ' + $OutageName)

          $OutageService = $Outage.'Impacted Service'

          $Slide28 = $Presentation.Slides | Where-Object { $_.SlideIndex -eq 28 }

          $TargetShape = ($Slide28.Shapes | Where-Object { $_.Id -eq 4 })
          $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE

          ($Slide28.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(1).Text = $OutageName
          ($Slide28.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(2).Text = "What happened:"
          ($Slide28.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(3).Text = $Outage.'What happened'
          ($Slide28.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(2).Copy()
          Start-Sleep -Milliseconds 100
          ($Slide28.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(4).Paste() | Out-Null
          Start-Sleep -Milliseconds 100
          ($Slide28.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(4).Text = "Impacted Service:"
          ($Slide28.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(3).Copy()
          Start-Sleep -Milliseconds 100
          ($Slide28.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(5).Paste() | Out-Null
          Start-Sleep -Milliseconds 100
          ($Slide28.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(5).Text = $OutageService
          ($Slide28.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(4).Copy()
          Start-Sleep -Milliseconds 100
          ($Slide28.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(6).Paste() | Out-Null
          Start-Sleep -Milliseconds 100
          ($Slide28.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(6).Text = "How can customers make incidents like this less impactful:"
          ($Slide28.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(5).Copy()
          Start-Sleep -Milliseconds 100
          ($Slide28.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(7).Paste() | Out-Null
          Start-Sleep -Milliseconds 100
          ($Slide28.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(7).Text = $Outage.'How can customers make incidents like this less impactful'

          while (($Slide28.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs().count -gt 7) {
            ($Slide28.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(8).Delete()
          }
        }
        else {
          Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 28 - Creating new Slide..')
          ############### NEXT 9 SLIDES

          $OutageName = ($Outage.'Tracking ID' + ' - ' + $Outage.title)
          Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 28 - Adding Outage: ' + $OutageName)

          $OutageService = $Outage.'Impacted Service'
          $CustomLayout = $Slide28.CustomLayout
          $Presentation.Slides.addSlide($CurrentSlide, $customLayout) | Out-Null

          $NextSlide = $Presentation.Slides | Where-Object { $_.SlideIndex -eq $CurrentSlide }

          ($Slide28.Shapes | Where-Object { $_.Id -eq 6 }).TextFrame.TextRange.Copy()
          Start-Sleep -Milliseconds 100

          ($NextSlide.Shapes | Where-Object { $_.Id -eq 2 }).TextFrame.TextRange.Paste() | Out-Null
          Start-Sleep -Milliseconds 100

          ($Slide28.Shapes | Where-Object { $_.Id -eq 4 }).Copy()
          Start-Sleep -Milliseconds 100

          $NextSlide.Shapes.Paste() | Out-Null
          Start-Sleep -Milliseconds 100

          ($Slide28.Shapes | Where-Object { $_.Id -eq 7 }).Copy()
          Start-Sleep -Milliseconds 100

          $NextSlide.Shapes.Paste() | Out-Null
          Start-Sleep -Milliseconds 100

          ($NextSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Paragraphs(1).Text = $OutageName
          ($NextSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Paragraphs(2).Text = "What happened:"
          ($NextSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Paragraphs(3).Text = $Outage.'What happened'
          ($NextSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Paragraphs(2).Copy()
          Start-Sleep -Milliseconds 100
          ($NextSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Paragraphs(4).Paste() | Out-Null
          Start-Sleep -Milliseconds 100
          ($NextSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Paragraphs(4).Text = "Impacted Service:"
          ($NextSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Paragraphs(3).Copy()
          Start-Sleep -Milliseconds 100
          ($NextSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Paragraphs(5).Paste() | Out-Null
          Start-Sleep -Milliseconds 100
          ($NextSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Paragraphs(5).Text = $OutageService
          ($NextSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Paragraphs(4).Copy()
          Start-Sleep -Milliseconds 100
          ($NextSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Paragraphs(6).Paste() | Out-Null
          Start-Sleep -Milliseconds 100
          ($NextSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Paragraphs(6).Text = "How can customers make incidents like this less impactful:"
          ($NextSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Paragraphs(5).Copy()
          Start-Sleep -Milliseconds 100
          ($NextSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Paragraphs(7).Paste() | Out-Null
          Start-Sleep -Milliseconds 100
          ($NextSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Paragraphs(7).Text = $Outage.'How can customers make incidents like this less impactful'

          ($Slide28.Shapes | Where-Object { $_.Id -eq 31 }).Copy()

          $NextSlide.Shapes.Paste() | Out-Null

          while (($NextSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Paragraphs().count -gt 7) {
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 4 }).TextFrame.TextRange.Paragraphs(8).Delete()
          }
        }
        $Loop ++
        $CurrentSlide ++
      }
    }
  }

  ############# Slide 29
  function Build-PPTSlide29 {
    Param($Presentation,$SupportTickets,$AUTOMESSAGE,$Debugging)
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 29 - Sev-A Support Requests..')

    $Loop = 1
    $CurrentSlide = 29
    $Slide = 1

    if (![string]::IsNullOrEmpty($SupportTickets)) {
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 29 - Support Tickets found..')
      foreach ($Tickets in $SupportTickets) {
        $TicketName = ($Tickets.'Ticket ID' + ' - ' + $Tickets.Title)
        Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 29 - Adding Ticket: ' + $TicketName)
        $TicketStatus = $Tickets.'Status'
        $TicketDate = $Tickets.'Creation Date'

        if ($Slide -eq 1) {
          if ($Loop -eq 1) {
            $Slide29 = $Presentation.Slides | Where-Object { $_.SlideIndex -eq 29 }
            $TargetShape = ($Slide29.Shapes | Where-Object { $_.Id -eq 4 })
            $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE

            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(1).Text = $TicketName
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(2).Text = "Status: $TicketStatus"
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(3).Text = "Creation Date: $TicketDate"
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(3).Copy()
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(4).Paste() | Out-Null
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(4).Text = "Recommendation: "

            while (($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs().count -gt 4) {
              ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(5).Delete()
            }
            $ParagraphLoop = 5
            $Loop ++
          }
          else {
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.InsertAfter(".") | Out-Null
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(1).Copy()
            Start-Sleep -Milliseconds 100
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs($ParagraphLoop).Paste() | Out-Null
            Start-Sleep -Milliseconds 100
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs($ParagraphLoop).Text = $TicketName
            $ParagraphLoop ++
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.InsertAfter(".") | Out-Null
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(2).Copy()
            Start-Sleep -Milliseconds 100
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs($ParagraphLoop).Paste() | Out-Null
            Start-Sleep -Milliseconds 100
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs($ParagraphLoop).Text = "Status: $TicketStatus"
            $ParagraphLoop ++
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.InsertAfter(".") | Out-Null
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(3).Copy()
            Start-Sleep -Milliseconds 100
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs($ParagraphLoop).Paste() | Out-Null
            Start-Sleep -Milliseconds 100
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs($ParagraphLoop).Text = "Creation Date: $TicketDate"
            $ParagraphLoop ++
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.InsertAfter(".") | Out-Null
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(4).Copy()
            Start-Sleep -Milliseconds 100
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs($ParagraphLoop).Paste() | Out-Null
            Start-Sleep -Milliseconds 100
            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs($ParagraphLoop).Text = "Recommendation: "
            $ParagraphLoop ++

            if ($Loop -eq 4) {
              $Loop = 1
              $Slide ++
              $CurrentSlide ++
            }
            else {
              $Loop ++
            }
            Start-Sleep -Milliseconds 500
          }
        }
        else {
          if ($Loop -eq 1) {
            Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 29 - Adding new Slide..')
            $CustomLayout = $Slide29.CustomLayout
            $Presentation.Slides.addSlide($CurrentSlide, $customLayout) | Out-Null

            $NextSlide = $Presentation.Slides | Where-Object { $_.SlideIndex -eq $CurrentSlide }

            ($Slide29.Shapes | Where-Object { $_.Id -eq 6 }).TextFrame.TextRange.Copy()
            Start-Sleep -Milliseconds 200

            ($NextSlide.Shapes | Where-Object { $_.Id -eq 2 }).TextFrame.TextRange.Paste() | Out-Null
            Start-Sleep -Milliseconds 100

            ($Slide29.Shapes | Where-Object { $_.Id -eq 4 }).Copy()
            Start-Sleep -Milliseconds 200

            $NextSlide.Shapes.Paste() | Out-Null
            Start-Sleep -Milliseconds 100

            ($Slide29.Shapes | Where-Object { $_.Id -eq 2 }).Copy()
            Start-Sleep -Milliseconds 200

            $NextSlide.Shapes.Paste() | Out-Null
            Start-Sleep -Milliseconds 100

            ($Slide29.Shapes | Where-Object { $_.Id -eq 7 }).Copy()
            Start-Sleep -Milliseconds 200

            $NextSlide.Shapes.Paste() | Out-Null
            Start-Sleep -Milliseconds 100

            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs(1).Text = $TicketName
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs(2).Text = "Status: $TicketStatus"
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs(3).Text = "Creation Date: $TicketDate"
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs(4).Text = "Recommendation: "

            while (($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs().count -gt 4) {
              ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs(5).Delete()
            }
            $ParagraphLoop = 5
            $Loop ++
          }
          else {
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.InsertAfter(".") | Out-Null
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs(1).Copy()
            Start-Sleep -Milliseconds 100
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs($ParagraphLoop).Paste() | Out-Null
            Start-Sleep -Milliseconds 100
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs($ParagraphLoop).Text = $TicketName
            $ParagraphLoop ++
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.InsertAfter(".") | Out-Null
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs(2).Copy()
            Start-Sleep -Milliseconds 100
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs($ParagraphLoop).Paste() | Out-Null
            Start-Sleep -Milliseconds 100
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs($ParagraphLoop).Text = "Status: $TicketStatus"
            $ParagraphLoop ++
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.InsertAfter(".") | Out-Null
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs(3).Copy()
            Start-Sleep -Milliseconds 100
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs($ParagraphLoop).Paste() | Out-Null
            Start-Sleep -Milliseconds 100
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs($ParagraphLoop).Text = "Creation Date: $TicketDate"
            $ParagraphLoop ++
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.InsertAfter(".") | Out-Null
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs(4).Copy()
            Start-Sleep -Milliseconds 100
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs($ParagraphLoop).Paste() | Out-Null
            Start-Sleep -Milliseconds 100
            ($NextSlide.Shapes | Where-Object { $_.Id -eq 9 }).TextFrame.TextRange.Paragraphs($ParagraphLoop).Text = "Recommendation: "
            $ParagraphLoop ++

            if ($Loop -eq 4) {
              $Loop = 1
              $Slide ++
              $CurrentSlide ++
            }
            else {
              $Loop ++
            }
          }
        }
        Start-Sleep -Milliseconds 500
      }
    }
  }

  ############# Slide 30
  function Build-PPTSlide30 {
    Param($Presentation,$AUTOMESSAGE,$Retirements,$Debugging)
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 30 - Service Retirement Notifications..')

    $Loop = 1

    if (![string]::IsNullOrEmpty($Retirements)) {
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 30 - Service Retirement found..')
      $Slide30 = $Presentation.Slides | Where-Object { $_.SlideIndex -eq 30 }

      $TargetShape = ($Slide30.Shapes | Where-Object { $_.Id -eq 4 })
      $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE
      #$TargetShape.Delete()

      ($Slide30.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(1).Text = '.'

      while (($Slide30.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs().count -gt 2) {
        ($Slide30.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(2).Delete()
      }

      foreach ($Retirement in $Retirements) {
        if ($Loop -lt 15) {
          if ($Loop -eq 1) {
            $RetireName = ($Retirement.'Tracking ID' + ' - ' + $Retirement.Status + ' : ' + $Retirement.title)
            Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Slide 30 - Adding Retirement: ' + $RetireName)

            ($Slide30.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(1).Text = $RetireName
            $Loop ++
          }
          else {
            $RetireName = ($Retirement.'Tracking ID' + ' - ' + $Retirement.Status + ' : ' + $Retirement.title)

            ($Slide30.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.InsertAfter(".") | Out-Null
            Start-Sleep -Milliseconds 100
            ($Slide30.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs(1).Copy()
            Start-Sleep -Milliseconds 100
            ($Slide30.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs($Loop).Paste() | Out-Null
            Start-Sleep -Milliseconds 100
            ($Slide30.Shapes | Where-Object { $_.Id -eq 7 }).TextFrame.TextRange.Paragraphs($Loop).Text = $RetireName
            $Loop ++
          }
        }
      }
    }
  }

  ######################## WORD Functions ##########################

  function Build-WordCore {
    Param($Document,$Word,$WorkloadName,$CustomerName,$Debugging)
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Word Core File..')

    $MatchCase = $false
    $MatchWholeWord = $true
    $MatchWildcards = $false
    $MatchSoundsLike = $false
    $MatchAllWordForms = $false
    $Forward = $true
    $wrap = $wdFindContinue
    $wdFindContinue = 1
    $Format = $false
    $ReplaceAll = 2

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Replacing Workload name: ' + $WorkloadName)
    $FindText = '[Workload Name]'
    $ReplaceWith = $WorkloadName
    $Document.Content.Find.Execute($FindText, $MatchCase, $MatchWholeWord, $MatchWildcards, $MatchSoundsLike, $MatchAllWordForms, $Forward, $wrap, $Format, $ReplaceWith, $ReplaceAll) | Out-Null

    $FindText = 'Workload Name'
    $ReplaceWith = $WorkloadName
    $Document.Content.Find.Execute($FindText, $MatchCase, $MatchWholeWord, $MatchWildcards, $MatchSoundsLike, $MatchAllWordForms, $Forward, $wrap, $Format, $ReplaceWith, $ReplaceAll) | Out-Null

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Replacing Customer name: ' + $CustomerName)
    $FindText = '[Customer Name]'
    $ReplaceWith = $CustomerName
    $Document.Content.Find.Execute($FindText, $MatchCase, $MatchWholeWord, $MatchWildcards, $MatchSoundsLike, $MatchAllWordForms, $Forward, $wrap, $Format, $ReplaceWith, $ReplaceAll) | Out-Null

    $FindText = '[Type Customer Name Here]'
    $ReplaceWith = $CustomerName
    $Document.Content.Find.Execute($FindText, $MatchCase, $MatchWholeWord, $MatchWildcards, $MatchSoundsLike, $MatchAllWordForms, $Forward, $wrap, $Format, $ReplaceWith, $ReplaceAll) | Out-Null
    $Document.Sections(1).Headers(1).Range.Find.Execute($FindText, $MatchCase, $MatchWholeWord, $MatchWildcards, $MatchSoundsLike, $MatchAllWordForms, $Forward, $wrap, $Format, $ReplaceWith, $ReplaceAll) | Out-Null

    # Total Recommendations
    $Document.Content.Paragraphs(145).Range.Text = [string]($ExcelCore | Where-Object { $_."Number of Impacted Resources?" -gt 0 }).count
    #High Impact
    $Document.Content.Paragraphs(155).Range.Text = [string]($ExcelCore | Where-Object { $_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'High' }).count
    #Medium Impact
    $Document.Content.Paragraphs(157).Range.Text = [string]($ExcelCore | Where-Object { $_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'Medium' }).count
    #Low Impact
    $Document.Content.Paragraphs(159).Range.Text = [string]($ExcelCore | Where-Object { $_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'Low' }).count
    #Impacted Resources
    $Document.Content.Paragraphs(165).Range.Text = [string]($ExcelContent.id | Where-Object { ![string]::IsNullOrEmpty($_) } | Select-Object -Unique).count

    $HealthHigh = $ExcelCore | Where-Object { $_."Number of Impacted Resources?" -gt 1 -and $_.Impact -eq 'High' } | Sort-Object -Property "Number of Impacted Resources?" -Descending

    #Risk Assessment Result
    $Document.Content.Paragraphs(176).Range.Text = ''
    $Document.Content.Paragraphs(175).Range.Text = ''

    #$Global:Document.Content.Paragraphs(158).Range.ListFormat.ApplyListTemplate($Global:Word.Application.ListGalleries[1].ListTemplates[3])

    #Health Assessment Result
    $Document.Content.Paragraphs(172).Range.Text = ''

    #$Global:Document.Content.Paragraphs(158).Range.ListFormat.ApplyListTemplate($Global:Word.Application.ListGalleries[1].ListTemplates[3])
    $Document.Content.Paragraphs(171).Range.Select()
    $Loops = 1
    Foreach ($Risk in $HealthHigh) {
      if ([string]::IsNullOrEmpty($Risk)) {
        $Document.Content.Paragraphs(171).Range.Text = ''
      }
      $Title = $Risk.'Recommendation Title'
      if ($Loops -eq 1) {
        $Word.Selection.TypeText($Title) | Out-Null
      }
      else {
        $Word.Selection.TypeParagraph() | Out-Null
        $Word.Selection.TypeText($Title) | Out-Null
      }
      $Loops ++
    }
  }
  function Build-WordCharts {
    Param($Ex,$Document,$Word,$Debugging)

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Looking for Charts in the Excel file..')
    #Charts
    $WS2 = $Ex.Worksheets | Where-Object { $_.Name -eq 'Charts' }

    $Position = $Document.Content.Paragraphs(181).Range.Start

    $Document.Content.InlineShapes(10).Delete() | Out-Null
    $Document.Content.InlineShapes(9).Delete() | Out-Null
    $Document.Content.InlineShapes(8).Delete() | Out-Null

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Coping Chart 1..')
    $WS2.ChartObjects('ChartP0').copy()

    $Document.Range($Position, $Position).Select()
    $Word.Selection.Paste() | Out-Null

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Coping Chart 2..')
    $WS2.ChartObjects('ChartP1').copy()
    $Word.Selection.Paste() | Out-Null

  }
  function Build-WordOutages {
    Param($Document,$Outages,$Debugging)
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Outages..')

    $Document.Tables(10).Rows(2).Cells(1).Range.Text = ''
    $Document.Tables(10).Rows(2).Cells(2).Range.Text = ''
    $Document.Tables(10).Rows(2).Cells(3).Range.Text = ''

    $LineCounter = 2
    if (![string]::IsNullOrEmpty($Outages)) {
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Outages found..')
      foreach ($Outage in $Outages) {
        if ($LineCounter -gt 3) {
          $Document.Tables(10).Rows.Add() | Out-Null
        }
        $OutageName = ($Outage.'Tracking ID' + ' - ' + $Outage.title)
        Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Adding Outage: ' + $OutageName)
        $OutageWhat = $Outage.'What happened'
        $OutageRecom = $Outage.'How can customers make incidents like this less impactful'

        $Document.Tables(10).Rows($LineCounter).Cells(1).Range.Text = $OutageName
        $Document.Tables(10).Rows($LineCounter).Cells(2).Range.Text = $OutageWhat
        $Document.Tables(10).Rows($LineCounter).Cells(3).Range.Text = $OutageRecom

        $LineCounter ++
      }
    }
  }
  function Build-WordTables {
    Param($Document,$HighImpact,$MediumImpact,$LowImpact,$Debugging)
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Tables..')

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Cleaning Table 6..')
    $row = 2
    while ($row -lt 5) {
      $cell = 1
      while ($cell -lt 5) {
        $Document.Tables(6).Rows($row).Cells($cell).Range.Text = ''
        $Cell ++
      }
      $row ++
    }

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Cleaning Table 7..')
    $row = 2
    while ($row -lt 3) {
      $cell = 1
      while ($cell -lt 5) {
        $Document.Tables(7).Rows($row).Cells($cell).Range.Text = ''
        $Cell ++
      }
      $row ++
    }

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Cleaning Table 8..')
    $row = 2
    while ($row -lt 3) {
      $cell = 1
      while ($cell -lt 5) {
        $Document.Tables(8).Rows($row).Cells($cell).Range.Text = ''
        $Cell ++
      }
      $row ++
    }

    #Populate Table Health and Risk Summary High
    $counter = 1
    $row = 2
    foreach ($Impact in $HighImpact) {
      $LogHighImpact = $Impact.'Recommendation Title'
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Adding High Impact: ' + $LogHighImpact)
      if ($counter -lt 14) {
        #Number
        $Document.Tables(6).Rows($row).Cells(1).Range.Text = [string]$counter
        #Recommendation
        $Document.Tables(6).Rows($row).Cells(2).Range.Text = $Impact.'Recommendation Title'
        #Service
        if ($Impact.'Azure Service / Well-Architected' -eq 'Well Architected') {
          $ServiceName = ('WAF - ' + $Impact.'Azure Service / Well-Architected Topic')
        }
        else {
          $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
        }
        $Document.Tables(6).Rows($row).Cells(3).Range.Text = $ServiceName
        #Impacted Resources
        $Document.Tables(6).Rows($row).Cells(4).Range.Text = [string]$Impact.'Number of Impacted Resources?'
        $counter ++
        $row ++
      }
      else {
        Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Adding Row to High Impact table..')
        $Document.Tables(6).Rows.add() | Out-Null
        #Number
        $Document.Tables(6).Rows($row).Cells(1).Range.Text = [string]$counter
        #Recommendation
        $Document.Tables(6).Rows($row).Cells(2).Range.Text = $Impact.'Recommendation Title'
        #Service
        if ($Impact.'Azure Service / Well-Architected' -eq 'Well Architected') {
          $ServiceName = ('WAF - ' + $Impact.'Azure Service / Well-Architected Topic')
        }
        else {
          $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
        }
        $Document.Tables(6).Rows($row).Cells(3).Range.Text = $ServiceName
        #Impacted Resources
        $Document.Tables(6).Rows($row).Cells(4).Range.Text = [string]$Impact.'Number of Impacted Resources?'
        $counter ++
        $row ++
      }
    }

    #Populate Table Health and Risk Summary Medium
    $counter = 1
    $row = 2
    foreach ($Impact in $MediumImpact) {
      $LogMediumImpact = $Impact.'Recommendation Title'
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Adding Medium Impact: ' + $LogMediumImpact)
      if ($counter -lt 14) {
        #Number
        $Document.Tables(7).Rows($row).Cells(1).Range.Text = [string]$counter
        #Recommendation
        $Document.Tables(7).Rows($row).Cells(2).Range.Text = $Impact.'Recommendation Title'
        #Service
        if ($Impact.'Azure Service / Well-Architected' -eq 'Well Architected') {
          $ServiceName = ('WAF - ' + $Impact.'Azure Service / Well-Architected Topic')
        }
        else {
          $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
        }
        $Document.Tables(7).Rows($row).Cells(3).Range.Text = $ServiceName
        #Impacted Resources
        $Document.Tables(7).Rows($row).Cells(4).Range.Text = [string]$Impact.'Number of Impacted Resources?'
        $counter ++
        $row ++
      }
      else {
        Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Adding Row to Medium Impact table..')
        $Document.Tables(7).Rows.add() | Out-Null
        #Number
        $Document.Tables(7).Rows($row).Cells(1).Range.Text = [string]$counter
        #Recommendation
        $Document.Tables(7).Rows($row).Cells(2).Range.Text = $Impact.'Recommendation Title'
        #Service
        if ($Impact.'Azure Service / Well-Architected' -eq 'Well Architected') {
          $ServiceName = ('WAF - ' + $Impact.'Azure Service / Well-Architected Topic')
        }
        else {
          $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
        }
        $Document.Tables(7).Rows($row).Cells(3).Range.Text = $ServiceName
        #Impacted Resources
        $Document.Tables(7).Rows($row).Cells(4).Range.Text = [string]$Impact.'Number of Impacted Resources?'
        $counter ++
        $row ++
      }
    }

    #Populate Table Health and Risk Summary Low
    $counter = 1
    $row = 2
    foreach ($Impact in $LowImpact) {
      $LogLowImpact = $Impact.'Recommendation Title'
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Adding Low Impact: ' + $LogLowImpact)
      if ($counter -lt 14) {
        #Number
        $Document.Tables(8).Rows($row).Cells(1).Range.Text = [string]$counter
        #Recommendation
        $Document.Tables(8).Rows($row).Cells(2).Range.Text = $Impact.'Recommendation Title'
        #Service
        if ($Impact.'Azure Service / Well-Architected' -eq 'Well Architected') {
          $ServiceName = ('WAF - ' + $Impact.'Azure Service / Well-Architected Topic')
        }
        else {
          $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
        }
        $Document.Tables(8).Rows($row).Cells(3).Range.Text = $ServiceName
        #Impacted Resources
        $Document.Tables(8).Rows($row).Cells(4).Range.Text = [string]$Impact.'Number of Impacted Resources?'
        $counter ++
        $row ++
      }
      else {
        Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Adding Row to Low Impact table..')
        $Document.Tables(8).Rows.add() | Out-Null
        #Number
        $Document.Tables(8).Rows($row).Cells(1).Range.Text = [string]$counter
        #Recommendation
        $Document.Tables(8).Rows($row).Cells(2).Range.Text = $Impact.'Recommendation Title'
        #Service
        if ($Impact.'Azure Service / Well-Architected' -eq 'Well Architected') {
          $ServiceName = ('WAF - ' + $Impact.'Azure Service / Well-Architected Topic')
        }
        else {
          $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
        }
        $Document.Tables(8).Rows($row).Cells(3).Range.Text = $ServiceName
        #Impacted Resources
        $Document.Tables(8).Rows($row).Cells(4).Range.Text = [string]$Impact.'Number of Impacted Resources?'
        $counter ++
        $row ++
      }
    }
  }
  function Build-WordRetirements {
    Param($Document,$Retirements,$Debugging)
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Retirements..')

      $Document.Tables(12).Rows(2).Cells(1).Range.Text = ''
      $Document.Tables(12).Rows(2).Cells(2).Range.Text = ''
      $Document.Tables(12).Rows(2).Cells(3).Range.Text = ''

      $LineCounter = 2
      if (![string]::IsNullOrEmpty($Retirements)) {
        Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Retirements found..')
        foreach ($Retires in $Retirements) {
          if ($LineCounter -gt 3) {
            $Document.Tables(12).Rows.Add() | Out-Null
          }
          $RetireName = ($Retires.'Tracking ID' + ' - ' + $Retires.Status + ' : ' + $Retires.title)
          Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Adding Retirement: ' + $RetireName)
          $RetireSub = $Retires.Subscription
          $RetireDetails = $Retires.Details

          $Document.Tables(12).Rows($LineCounter).Cells(1).Range.Text = $RetireName
          $Document.Tables(12).Rows($LineCounter).Cells(2).Range.Text = $RetireSub
          $Document.Tables(12).Rows($LineCounter).Cells(3).Range.Text = $RetireDetails

          $LineCounter ++
        }
      }
  }
  function Build-WordSupports {
    Param($Document,$SupportTickets,$Debugging)
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Support Tickets..')

    try {
      $Document.Tables(11).Rows(2).Cells(1).Range.Text = ''
      $Document.Tables(11).Rows(2).Cells(2).Range.Text = ''
      $Document.Tables(11).Rows(2).Cells(3).Range.Text = ''
      $Document.Tables(11).Rows(2).Cells(4).Range.Text = ''

      $LineCounter = 2
      if (![string]::IsNullOrEmpty($SupportTickets)) {
        Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Support Tickets found..')
        foreach ($Ticket in $SupportTickets) {
          if ($LineCounter -gt 3) {
            $Document.Tables(11).Rows.Add() | Out-Null
          }
          $TicketName = ($Ticket.'Ticket ID' + ' - ' + $Ticket.Title)
          Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Adding Support Ticket: ' + $TicketName)
          $CreatedDate = $Ticket.'Creation Date'

          $Document.Tables(11).Rows($LineCounter).Cells(1).Range.Text = $TicketName
          $Document.Tables(11).Rows($LineCounter).Cells(2).Range.Text = $CreatedDate
          $Document.Tables(11).Rows($LineCounter).Cells(3).Range.Text = " "
          $Document.Tables(11).Rows($LineCounter).Cells(4).Range.Text = " "

          $LineCounter ++
        }
      }
    }
    catch {
      $errorMessage = $_.Exception
      $ErrorStack = $_.ScriptStackTrace
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Error - ' + $errorMessage)
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Error - ' + $ErrorStack)
    }
  }
  function Build-WordHealths {
    Param($Document,$ServiceHealth,$Debugging)
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Editing Service Health Alerts..')

    $Document.Tables(5).Rows(3).Cells(1).Range.Text = ''
    $Document.Tables(5).Rows(3).Cells(2).Range.Text = ''
    $Document.Tables(5).Rows(3).Cells(3).Range.Text = ''
    $Document.Tables(5).Rows(3).Cells(4).Range.Text = ''
    $Document.Tables(5).Rows(3).Cells(5).Range.Text = ''
    $Document.Tables(5).Rows(3).Cells(6).Range.Text = ''
    $Document.Tables(5).Rows(3).Cells(7).Range.Text = ''
    $Document.Tables(5).Rows(3).Cells(8).Range.Text = ''

    $LineCounter = 3
    if (![string]::IsNullOrEmpty($ServiceHealth)) {
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Service Health Alerts found..')
      foreach ($Health in $ServiceHealth) {
        $LogHealthName = $Health.Name
        Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Adding Service Health Alert: ' + $LogHealthName)
        if ($LineCounter -gt 4) {
          $Document.Tables(5).Rows.Add() | Out-Null
        }
        $ActionGroup = $Health.'Action Group'

        $Document.Tables(5).Rows($LineCounter).Cells(1).Range.Text = $Health.Subscription
        $Document.Tables(5).Rows($LineCounter).Cells(2).Range.Text = $Health.Services
        $Document.Tables(5).Rows($LineCounter).Cells(3).Range.Text = $Health.Regions
        $Document.Tables(5).Rows($LineCounter).Cells(4).Range.Text = if ($Health.'Event Type' -like '*Service Issues*' -or $Health.'Event Type' -eq 'All') { 'Yes' }else { 'No' }
        $Document.Tables(5).Rows($LineCounter).Cells(5).Range.Text = if ($Health.'Event Type' -like '*Planned Maintenance*' -or $Health.'Event Type' -eq 'All') { 'Yes' }else { 'No' }
        $Document.Tables(5).Rows($LineCounter).Cells(6).Range.Text = if ($Health.'Event Type' -like '*Health Advisories*' -or $Health.'Event Type' -eq 'All') { 'Yes' }else { 'No' }
        $Document.Tables(5).Rows($LineCounter).Cells(7).Range.Text = if ($Health.'Event Type' -like '*Security Advisory*' -or $Health.'Event Type' -eq 'All') { 'Yes' }else { 'No' }
        $Document.Tables(5).Rows($LineCounter).Cells(8).Range.Text = $ActionGroup
        $LineCounter ++
      }
    }
  }


  #Call the functions
  $Version = "2.1.5"
  Write-Host "Version: " -NoNewline
  Write-Host $Version -ForegroundColor DarkBlue -NoNewline
  Write-Host " "

  Write-Debug (' ---------------------------------- STARTING REPORT GENERATOR SCRIPT --------------------------------------- ')
  Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Starting Report Generator Script..')
  Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Script Version: ' + $Version)
  Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Excel File: ' + $ExcelFile)
  if ($Debugging.IsPresent) {
    $ImportExcel = Get-Module -Name ImportExcel -ListAvailable -ErrorAction silentlycontinue
    foreach ($IExcel in $ImportExcel) {
      $IExcelPath = $IExcel.Path
      $IExcelVer = [string]$IExcel.Version
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - ImportExcel Module Path: ' + $IExcelPath) 
      Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - ImportExcel Module Version: ' + $IExcelVer) 
    }
  }

  if ($Help.IsPresent) {
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Help menu invoked..')
    Help
    Exit
  }

  Write-Progress -Id 1 -activity "Processing Office Apps" -Status "10% Complete." -PercentComplete 10
  Requirements
  Write-Progress -Id 1 -activity "Processing Office Apps" -Status "15% Complete." -PercentComplete 15
  #LocalFiles
  Write-Progress -Id 1 -activity "Processing Office Apps" -Status "20% Complete." -PercentComplete 20

  $CoreFile = get-item -Path $ExcelFile
  $CoreFile = $CoreFile.FullName

  $ExcelCore = Get-ExcelCore -ExcelFile $CoreFile

  $ExcelRecommendations = Get-ExcelContentRecommnedation -ExcelFile $CoreFile

  $ExcelContent = Get-ExcelContent -ExcelFile $CoreFile

  Write-Progress -Id 1 -activity "Processing Office Apps" -Status "25% Complete." -PercentComplete 25

  $Outages = Get-ExcelOutage -ExcelFile $CoreFile

  Write-Progress -Id 1 -activity "Processing Office Apps" -Status "30% Complete." -PercentComplete 30

  $SupportTickets = Get-ExcelTicket -ExcelFile $CoreFile

  Write-Progress -Id 1 -activity "Processing Office Apps" -Status "35% Complete." -PercentComplete 35

  $ServiceHealth = Get-ExcelServiceHealth -ExcelFile $CoreFile

  Write-Progress -Id 1 -activity "Processing Office Apps" -Status "40% Complete." -PercentComplete 40

  $Retirements = Get-ExcelRetirement -ExcelFile $CoreFile

  Write-Progress -Id 1 -activity "Processing Office Apps" -Status "45% Complete." -PercentComplete 45

  Write-Host "Editing " -NoNewline
  $PPTFinalFile = ($PSScriptRoot + '\Executive Summary Presentation - ' + $CustomerName + ' - ' + (get-date -Format "yyyy-MM-dd-HH-mm") + '.pptx')
  if ($WordTemplateFile) {
    Write-Host "PowerPoint" -ForegroundColor DarkRed -NoNewline
    Write-Host " and " -NoNewline
    Write-Host "Word" -ForegroundColor DarkBlue -NoNewline
    Write-Host " "
    $WordFinalFile = ($PSScriptRoot + '\Assessment Report - ' + $CustomerName + ' - ' + (get-date -Format "yyyy-MM-dd-HH-mm") + '.docx')
  }
  else {
    Write-Host "PowerPoint" -ForegroundColor DarkRed -NoNewline
    Write-Host " "
  }

  $AUTOMESSAGE = 'AUTOMATICALLY MODIFIED (Please Review)'

  $HighImpact = $ExcelCore | Where-Object { $_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'High' } | Sort-Object -Property "Number of Impacted Resources?" -Descending
  $MediumImpact = $ExcelCore | Where-Object { $_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'Medium' } | Sort-Object -Property "Number of Impacted Resources?" -Descending
  $LowImpact = $ExcelCore | Where-Object { $_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'Low' } | Sort-Object -Property "Number of Impacted Resources?" -Descending

  $ServiceHighImpact = $ExcelCore | Where-Object { $_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'High' -and $_.'Azure Service / Well-Architected' -eq 'Azure Service' } | Sort-Object -Property "Number of Impacted Resources?" -Descending
  $WAFHighImpact = $ExcelCore | Where-Object { $_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'High' -and $_.'Azure Service / Well-Architected' -eq 'Well Architected' } | Sort-Object -Property "Number of Impacted Resources?" -Descending

  $ResourceIDs = $ExcelContent.id | Select-Object -Unique -CaseInsensitive

  Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Processing Resource Types..')
  
  $Resources = Get-ExcelResource -ResourceIDs $ResourceIDs

  $ResourcesTypes = $Resources | Group-Object -Property 'Resource Type' | Sort-Object -Property 'Count' -Descending | Select-Object -First 10

  Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Starting Excel..')

  $ExcelApplication = New-Object -ComObject Excel.Application
  Start-Sleep 1
  Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Openning Excel file..')

  $Ex = $ExcelApplication.Workbooks.Open($ExcelFile)

  while ([string]::IsNullOrEmpty($Ex)) {
    Start-Sleep 2
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Waiting Excel document..')
  }

  Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Starting PowerPoint..')
  #Openning PPT
  $Application = New-Object -ComObject PowerPoint.Application
  $Presentation = $Application.Presentations.Open($PPTTemplateFile, $null, $null, $null)

  Build-PPTSlide1 -Presentation $Presentation -CustomerName $CustomerName -WorkloadName $WorkloadName -Debugging $Debugging
  Build-PPTSlide12 -Presentation $Presentation -AUTOMESSAGE $AUTOMESSAGE -WorkloadName $WorkloadName -ResourcesType $ResourcesType -Debugging $Debugging
  Build-PPTSlide16 -Presentation $Presentation -AUTOMESSAGE $AUTOMESSAGE -ServiceHighImpact $ServiceHighImpact -WAFHighImpact $WAFHighImpact -ExcelCore $ExcelCore -ExcelContent $ExcelContent -Debugging $Debugging
  Build-PPTSlide17 -Presentation $Presentation -AUTOMESSAGE $AUTOMESSAGE -Ex $Ex -Debugging $Debugging

  Build-PPTSlide30 -Presentation $Presentation -AUTOMESSAGE $AUTOMESSAGE -Retirements $Retirements -Debugging $Debugging
  Build-PPTSlide29 -Presentation $Presentation -AUTOMESSAGE $AUTOMESSAGE -SupportTickets $SupportTickets -Debugging $Debugging
  Build-PPTSlide28 -Presentation $Presentation -AUTOMESSAGE $AUTOMESSAGE -Outages $Outages -Debugging $Debugging

  Build-PPTSlide25 -Presentation $Presentation -AUTOMESSAGE $AUTOMESSAGE -LowImpact $LowImpact -Debugging $Debugging
  Build-PPTSlide24 -Presentation $Presentation -AUTOMESSAGE $AUTOMESSAGE -MediumImpact $MediumImpact -Debugging $Debugging
  Build-PPTSlide23 -Presentation $Presentation -AUTOMESSAGE $AUTOMESSAGE -HighImpact $HighImpact -Debugging $Debugging

  Build-PPTSlide21 -Presentation $Presentation -AUTOMESSAGE $AUTOMESSAGE -ServiceHealth $ServiceHealth -Debugging $Debugging

  Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Closing PowerPoint..')
  $Presentation.SaveAs($PPTFinalFile)
  $Presentation.Close()
  $Application.Quit()


  if ($WordTemplateFile) {

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Starting Word..')
    $Word = New-Object -Com Word.Application

    $Document = $Word.documents.open($WordTemplateFile)

    Build-WordCharts -Ex $Ex -Document $Document -Word $Word -Debugging $Debugging
    Build-WordCore -Document $Document -Word $Word -WorkloadName $WorkloadName -CustomerName $CustomerName -Debugging $Debugging
    Build-WordRetirements -Document $Document -Retirements $Retirements -Debugging $Debugging
    Build-WordSupports -Document $Document -SupportTickets $SupportTickets -Debugging $Debugging
    Build-WordOutages -Document $Document -Outages $Outages -Debugging $Debugging
    Build-WordTables -Document $Document -HighImpact $HighImpact -MediumImpact $MediumImpact -LowImpact $LowImpact -Debugging $Debugging
    Build-WordHealths -Document $Document -ServiceHealth $ServiceHealth -Debugging $Debugging

    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Closing Word..')
    $Document.SaveAs($WordFinalFile)
    $Document.Close()
    $Word.Quit()

  }

  Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Closing Excel..')
  $Ex.Save()
  $Ex.Close()
  $ExcelApplication.Quit()

  $WorkloadRecommendationTemplate = Build-SummaryActionPlan $ExcelRecommendations

  $WorkloadRecommendationTemplate | Export-Csv -Path ($PSScriptRoot + '\Summary-Action-Plan-' + (get-date -Format "yyyy-MM-dd-HH-mm") + '.csv')

  Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Trying to kill PowerPoint process.') 
  Get-Process -Name "POWERPNT" -ErrorAction Ignore | Where-Object { $_.CommandLine -like '*/automation*' } | Stop-Process
  if ($WordTemplateFile) {
    Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Trying to kill Word process..')
    Get-Process -Name "WINWORD" -ErrorAction Ignore | Where-Object { $_.CommandLine -like '*/automation*' } | Stop-Process
  }
  Write-Debug ((get-date -Format 'yyyy-MM-dd HH:mm:ss') + ' - Trying to kill Excel process..')
  Get-Process -Name "excel" -ErrorAction Ignore | Where-Object { $_.CommandLine -like '*/automation*' } | Stop-Process

  Write-Progress -Id 1 -activity "Processing Office Apps" -Status "90% Complete." -PercentComplete 90
}

Write-Progress -Id 1 -activity "Processing Office Apps" -Status "100% Complete." -Completed
$TotalTime = $Runtime.Totalminutes.ToString('#######.##')

################ Finishing

Write-Host "---------------------------------------------------------------------"
Write-Host ('Execution Complete. Total Runtime was: ') -NoNewline
Write-Host $TotalTime -NoNewline -ForegroundColor Cyan
Write-Host (' Minutes')
Write-Host 'PowerPoint File Saved As: ' -NoNewline
Write-Host $PPTFinalFile -ForegroundColor Cyan
if ($WordTemplateFile) {
  Write-Host 'Word File Saved As: ' -NoNewline
  Write-Host $WordFinalFile -ForegroundColor Cyan
}

Write-Host "---------------------------------------------------------------------"
