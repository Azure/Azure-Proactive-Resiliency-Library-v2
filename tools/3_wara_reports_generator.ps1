Param(
    [switch]$Help,
    [switch] $Debugging,
    [switch] $VisualDebugging,
    [string] $CustomerName,
    [string] $WorkloadName,
    [Parameter(mandatory=$true)]
    [string] $ExcelFile,
    [string] $PPTTemplateFile,
    [string] $WordTemplateFile
    )


$Global:AUTOMESSAGE = 'AUTOMATICALLY MODIFIED (Please Review)'

if ($Debugging.IsPresent) { $DebugPreference = 'Continue' } else { $DebugPreference = "silentlycontinue" }

if (!$PPTTemplateFile)
    {
        if ((Test-Path -Path ($PSScriptRoot+'\Mandatory - Executive Summary presentation - Template.pptx') -PathType Leaf) -eq $true)
            {
                $PPTTemplateFile = ($PSScriptRoot+'\Mandatory - Executive Summary presentation - Template.pptx')
            }
        else
            {
                Write-Host "This script requires specific Microsoft PowerPoint and Word templates, only available to Microsoft Cloud Solution Architects at this moment. If you are participating on a Well-Architected Reliability Assessment, reach out to the CSA coordinating the engagement."
                Exit
            }
    }

if (!$WordTemplateFile)
    {
        if ((Test-Path -Path ($PSScriptRoot+'\Optional - Assessment Report - Template.docx') -PathType Leaf) -eq $true)
            {
                $WordTemplateFile = ($PSScriptRoot+'\Optional - Assessment Report - Template.docx')
            }
        else
            {
                Write-Host "This script requires specific Microsoft PowerPoint and Word templates, only available to Microsoft Cloud Solution Architects at this moment. If you are participating on a Well-Architected Reliability Assessment, reach out to the CSA coordinating the engagement."
                Exit
            }
    }

if (!$CustomerName)
    {
        $CustomerName = '[Customer Name]'
    }

if (!$WorkloadName)
    {
        $WorkloadName = '[Workload Name]'
    }

function Help {
    Write-Host ""
    Write-Host "Parameters"
    Write-Host ""
    Write-Host " -ExcelFile            :  Mandatory; WARA Excel file generated by '2_wara_data_analyzer.ps1' script and customized."
    Write-Host " -CustomerName         :  Optional; specifies the Name of the Customer to be added to the PPTx and DOCx files. "
    Write-Host " -WorkloadName         :  Optional; specifies the Name of the Workload of the analyses to be added to the PPTx and DOCx files. "
    Write-Host " -PPTTemplateFile      :  Optional; specifies the PPTx template file to be used as source. If not specified the script will look for the file in the same path as the script. "
    Write-Host " -WordTemplateFile     :  Optional; specifies the DOCx template file to be used as source. If not specified the script will look for the file in the same path as the script. "
    Write-Host " -Debugging            :  Writes Debugging information of the script during the execution. "
    Write-Host " -VisualDebugging      :  Runs the script showing the visual interactions with Microsoft PowerPoint and Microsoft Word. "
    Write-Host ""
    Write-Host "Examples: "
    Write-Host ""
    Write-Host "  Running with Customer details"
    Write-Host "  .\3_wara_reports_generator.ps1 -ExcelFile 'C:\WARA_Script\WARA Action Plan 2024-03-07_16_06.xlsx' -CustomerName 'ABC Customs' -WorkloadName 'SAP On Azure'"
    Write-Host ""
    Write-Host ""
    Write-Host "  Running without Customer details"
    Write-Host "  .\3_wara_reports_generator.ps1 -ExcelFile 'C:\WARA_Script\WARA Action Plan 2024-03-07_16_06.xlsx'"
    Write-Host ""
    Write-Host ""
}

$Global:Runtime = Measure-Command -Expression {


    function LocalFiles {
        # Define script path as the default path to save files
        $workingFolderPath = $PSScriptRoot
        Set-Location -path $workingFolderPath;
        $Global:clonePath = "$workingFolderPath\Azure-Proactive-Resiliency-Library"
        Write-Debug "Checking the version of the script"
        $RepoVersion = Get-Content -Path "$clonePath\tools\Version.json" -ErrorAction SilentlyContinue | ConvertFrom-Json
        if($Version -ne $RepoVersion.Generator)
            {
                Write-Host "This version of the script is outdated. " -BackgroundColor DarkRed
                Write-Host "Please use a more recent version of the script." -BackgroundColor DarkRed
            }
        else
            {
                Write-Host "This version of the script is current version. " -BackgroundColor DarkGreen
            }
    }

    ############# EXCEL
    function Excel {
        Write-Debug "Importing Core Excel Data"

        Write-Host "Openning Excel..."
        $Global:ExcelApplication = New-Object -ComObject Excel.Application
        #$ExcelApplication.Visible = $true
        Start-Sleep 1
        $Global:Ex = $ExcelApplication.Workbooks.Open($ExcelFile)
        Start-Sleep 1

        $Global:ExcelContent = Import-Excel -Path $ExcelFile -WorksheetName ImpactedResources

        $Global:Outages = try{Import-Excel -Path $ExcelFile -WorksheetName Outages}catch{}

        $Global:SupportTickets = try{Import-Excel -Path $ExcelFile -WorksheetName "Support Tickets" -AsText 'Ticket ID'}catch{}

        $Global:ServiceHealth = try{Import-Excel -Path $ExcelFile -WorksheetName "Health Alerts"}catch{}

        $Global:Retirements = try{Import-Excel -Path $ExcelFile -WorksheetName "Retirements"}catch{}

        $ResourceIDs = $ExcelContent.id | Select-Object -Unique -CaseInsensitive
        $Resources = @()
        Foreach($ID in $ResourceIDs)
            {
                if(![string]::IsNullOrEmpty($ID))
                    {
                        $obj = @{
                            'ID'            = $ID;
                            'Subscription'  = $ID.split('/')[2];
                            'Resource Group'= $ID.split('/')[4];
                            'Resource Type' = ($ID.split('/')[6]+'/'+$ID.split('/')[7])
                        }
                        $Resources += $obj
                    }
            }

        $Global:ResourcesTypes = $Resources | Group-Object -Property 'Resource Type' | Sort-Object -Property 'Count' -Descending | Select-Object -First 10

        $Global:ExcelCore = Import-Excel -Path $ExcelFile

        $Global:HighImpact = $ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'High'} | Sort-Object -Property "Number of Impacted Resources?" -Descending
        $Global:MediumImpact = $ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'Medium'} | Sort-Object -Property "Number of Impacted Resources?" -Descending
        $Global:LowImpact = $ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'Low'} | Sort-Object -Property "Number of Impacted Resources?" -Descending

        $Global:ServiceHighImpact = $ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'High' -and $_.'Azure Service / Well-Architected' -eq 'Azure Service'} | Sort-Object -Property "Number of Impacted Resources?" -Descending
        $Global:WordServicempact = $ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and ($_.Impact -eq 'High' -or $_.Impact -eq 'Medium') -and $_.'Azure Service / Well-Architected' -eq 'Azure Service'} | Sort-Object -Property "Number of Impacted Resources?" -Descending
        $Global:WAFHighImpact = $ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'High' -and $_.'Azure Service / Well-Architected' -eq 'Well Architected'} | Sort-Object -Property "Number of Impacted Resources?" -Descending
        $Global:WordWAFImpact = $ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and ($_.Impact -eq 'High' -or $_.Impact -eq 'Medium') -and $_.'Azure Service / Well-Architected' -eq 'Well Architected'} | Sort-Object -Property "Number of Impacted Resources?" -Descending

    }

    ############# PowerPoint and Word

    function PPT {
        Write-Debug "Openning PowerPoint"

        $Global:Application = New-Object -ComObject PowerPoint.Application

        if($VisualDebugging.IsPresent){$Global:pres = $Application.Presentations.Open($PPTTemplateFile)}else{$Global:pres = $Application.Presentations.Open($PPTTemplateFile, $null, $null, $null)}

    }

    function Word {
        Write-Debug "Openning Word"

        $Global:Word = New-Object -Com Word.Application

        if($VisualDebugging.IsPresent){$Global:Word.Visible = $true}

        $Global:Document = $Word.documents.open($WordTemplateFile)
    }

    function PPT_Orchestrator {

        ############# Slide 1
        function Slide1 {
            Write-Debug "Removing First Slide"

            if(($pres.Slides | Where-Object {$_.SlideIndex -eq 1}).Shapes[1].TextFrame.TextRange.Text -notlike '*VBD Update*')
                {
                    Write-host 'Incorrect PPTx Template file!' -ForegroundColor DarkRed -BackgroundColor Green
                    Write-host "Please use IPKit's PPTx Template File" -ForegroundColor DarkRed -BackgroundColor Green
                    Exit
                }

            ($pres.Slides | Where-Object {$_.SlideIndex -eq 1}).Delete()

            $Slide1 = $pres.Slides | Where-Object {$_.SlideIndex -eq 1}

            ($Slide1.Shapes | Where-Object {$_.Id -eq 5}).TextFrame.TextRange.Text = ($CustomerName+ ' - ' + $WorkloadName)
        }

        ############# SLide 12
        function Slide12 {
            Write-Debug "Editing Slide 12 - Workload Summary"

            $Slide12 = $pres.Slides | Where-Object {$_.SlideIndex -eq 12}

            $TargetShape = ($Slide12.Shapes | Where-Object {$_.Id -eq 9})
            $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE
            #$TargetShape.Delete()

            $TargetShape = ($Slide12.Shapes | Where-Object {$_.Id -eq 8})
            $TargetShape.Delete()

            ($Slide12.Shapes | Where-Object {$_.Id -eq 3}).TextFrame.TextRange.Text = ('During the engagement, the Workload '+$WorkloadName+' has been reviewed. The solution is hosted in two Azure regions, and runs mainly IaaS resources, with some PaaS resources, which includes but is not limited to:')


            $loop = 1
            foreach ($ResourcesType in $ResourcesTypes)
                {
                    if($loop -eq 1)
                        {
                            $ResourceTemp = ($ResourcesType.Name + ' ('+$ResourcesType.'Count'+')')
                            ($Slide12.Shapes | Where-Object {$_.Id -eq 6}).Table.Columns(1).Width = 685
                            ($Slide12.Shapes | Where-Object {$_.Id -eq 6}).Table.Rows(1).Cells(1).Shape.TextFrame.TextRange.Text = $ResourceTemp
                            ($Slide12.Shapes | Where-Object {$_.Id -eq 6}).Table.Rows(1).Height = 20
                        }
                    else
                        {
                            $ResourceTemp = ($ResourcesType.Name + ' ('+$ResourcesType.'Count'+')')
                            ($Slide12.Shapes | Where-Object {$_.Id -eq 6}).Table.Rows.Add() | Out-Null
                            ($Slide12.Shapes | Where-Object {$_.Id -eq 6}).Table.Rows($loop).Cells(1).Shape.TextFrame.TextRange.Text = $ResourceTemp
                        }
                    $loop ++
                }

        }

        ############# Slide 16
        function Slide16 {
            Write-Debug "Editing Slide 16 - Health and Risk Dashboard"

            $Slide16 = $pres.Slides | Where-Object {$_.SlideIndex -eq 16}

            $TargetShape = ($Slide16.Shapes | Where-Object {$_.Id -eq 41})
            $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE
            #$TargetShape.Delete()


            $count = 1
            foreach ($Impact in $ServiceHighImpact)
                {
                    if($count -le 5)
                        {
                            ($Slide16.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs($count).text = $Impact.'Recommendation Title'
                            $count ++
                        }
                }

                while (($Slide16.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs().count -gt 5)
                    {
                        ($Slide16.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs(6).Delete()
                    }

            if($WAFHighImpact.count -ne 0)
                {
                    $count = 1
                    foreach ($Impact in $WAFHighImpact)
                        {
                            if($count -lt 5)
                                {
                                    ($Slide16.Shapes | Where-Object {$_.Id -eq 12}).TextFrame.TextRange.Paragraphs($count).text = $Impact.'Recommendation Title'
                                    $count ++
                                }
                        }
                }
            else
                {
                    ($Slide16.Shapes | Where-Object {$_.Id -eq 12}).TextFrame.TextRange.Text = ' '
                }

            while (($Slide16.Shapes | Where-Object {$_.Id -eq 12}).TextFrame.TextRange.Paragraphs().count -gt 5)
                {
                    ($Slide16.Shapes | Where-Object {$_.Id -eq 12}).TextFrame.TextRange.Paragraphs(6).Delete()
                }


            #Total Recomendations
            ($Slide16.Shapes | Where-Object {$_.Id -eq 44}).GroupItems[3].TextFrame.TextRange.Text = [string]($ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0}).count
            #High Impact
            ($Slide16.Shapes | Where-Object {$_.Id -eq 44}).GroupItems[4].TextFrame.TextRange.Text = [string]($ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'High'}).count
            #Medium Impact
            ($Slide16.Shapes | Where-Object {$_.Id -eq 44}).GroupItems[5].TextFrame.TextRange.Text = [string]($ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'Medium'}).count
            #Low Impact
            ($Slide16.Shapes | Where-Object {$_.Id -eq 44}).GroupItems[6].TextFrame.TextRange.Text = [string]($ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'Low'}).count
            #Impacted Resources
            ($Slide16.Shapes | Where-Object {$_.Id -eq 44}).GroupItems[7].TextFrame.TextRange.Text = [string]($ExcelContent.id | Where-Object {![string]::IsNullOrEmpty($_)} | Select-Object -Unique).count

        }

        ############# Slide 17
        function Slide17 {
            Write-Debug "Editing Slide 17 - Health and Risk Dashboard"

            $Slide17 = $pres.Slides | Where-Object {$_.SlideIndex -eq 17}

            $TargetShape = ($Slide17.Shapes | Where-Object {$_.Id -eq 41})
            $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE
            #$TargetShape.Delete()


            Write-Debug "Finding Charts in the Excel File"
            $WS2 = $Global:Ex.Worksheets | Where-Object { $_.Name -eq 'Charts' }

            Write-Debug "Replacing Chart 1"
            #Copy Excel Chart0
            ($Slide17.Shapes | Where-Object {$_.Id -eq 3}).Chart.Delete()
            Start-Sleep -Milliseconds 100
            $WS2.ChartObjects('ChartP0').copy()
            Start-Sleep -Milliseconds 100
            $Slide17.Shapes.Paste() | Out-Null
            Start-Sleep 2
            foreach ($Shape in $Slide17.Shapes)
                {
                    if($Shape.Name -eq 'ChartP0')
                        {
                            $Shape.IncrementLeft(240)
                        }
                }

            Write-Debug "Replacing Chart 2"
            #Copy Excel Chart1
            ($Slide17.Shapes | Where-Object {$_.Id -eq 5}).Chart.Delete()
            Start-Sleep -Milliseconds 100
            $WS2.ChartObjects('ChartP1').copy()
            Start-Sleep -Milliseconds 100
            $Slide17.Shapes.Paste() | Out-Null
            Start-Sleep 2
            foreach ($Shape in $Slide17.Shapes)
                {
                    if($Shape.Name -eq 'ChartP1')
                        {
                            $Shape.IncrementLeft(-260)
                            $Shape.IncrementTop(45)
                        }
                }

        }

        ############# Slide 21
        function Slide21 {
            Write-Debug "Editing Slide 21 - Service Health Alerts"

            $FirstSlide = 21
            $TableID = 6
            $CurrentSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}
            $CoreSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}

            $TargetShape = ($CurrentSlide.Shapes | Where-Object {$_.Id -eq 41})
            $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE
            #$TargetShape.Delete()

            $row = 3
            while ($row -lt 2)
                {
                    $cell = 1
                    while($cell -lt 9)
                        {
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells($cell).Shape.TextFrame.TextRange.Text = ''
                            $Cell ++
                        }
                    $row ++
                }

            $Counter = 1
            $row = 3
            foreach($Health in $Global:ServiceHealth)
                {
                    if($Counter -lt 17)
                        {
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$Health.Subscription
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = [string]$Health.Name
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = if($Health.Services -eq 'All'){'Yes'}else{'No'}
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = if($Health.Regions -eq 'All'){'Yes'}else{'No'}
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(5).Shape.TextFrame.TextRange.Text = if($Health.'Event Type' -like '*Service Issues*' -or $Health.'Event Type' -eq 'All'){'Yes'}else{'No'}
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(6).Shape.TextFrame.TextRange.Text = if($Health.'Event Type' -like '*Planned Maintenance*' -or $Health.'Event Type' -eq 'All'){'Yes'}else{'No'}
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(7).Shape.TextFrame.TextRange.Text = if($Health.'Event Type' -like '*Health Advisories*' -or $Health.'Event Type' -eq 'All'){'Yes'}else{'No'}
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(8).Shape.TextFrame.TextRange.Text = if($Health.'Event Type' -like '*Security Advisory*' -or $Health.'Event Type' -eq 'All'){'Yes'}else{'No'}
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(9).Shape.TextFrame.TextRange.Text = ' '
                            $counter ++
                            $row ++
                        }
                    else
                        {
                            $Counter = 1
                            $CustomLayout = $CurrentSlide.CustomLayout
                            $FirstSlide ++
                            $pres.Slides.addSlide($FirstSlide,$customLayout) | Out-Null

                            $NextSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}
                            ($CoreSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Copy()
                            Start-Sleep -Milliseconds 100
                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 2}).TextFrame.TextRange.Paste() | Out-Null
                            Start-Sleep -Milliseconds 100
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Copy()
                            Start-Sleep -Milliseconds 100
                            $NextSlide.Shapes.Paste() | Out-Null
                            Start-Sleep -Milliseconds 100
                            $TableID = 3
                            ($CoreSlide.Shapes | Where-Object {$_.Id -eq 41}).Copy()
                            Start-Sleep -Milliseconds 100
                            $NextSlide.Shapes.Paste() | Out-Null
                            Start-Sleep -Milliseconds 100

                            $rowTemp = 2
                            while ($rowTemp -lt 18)
                                {
                                    $cell = 1
                                    while($cell -lt 5)
                                        {
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($rowTemp).Cells($cell).Shape.TextFrame.TextRange.Text = ''
                                            $Cell ++
                                        }
                                    $rowTemp ++
                                }

                            $CurrentSlide = $NextSlide

                            $row = 3
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$Health.Subscription
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = if($Health.Services -eq 'All'){'Yes'}else{'No'}
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = if($Health.Regions -eq 'All'){'Yes'}else{'No'}
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = if($Health.'Event Type' -like '*Service Issues*' -or $Health.'Event Type' -eq 'All'){'Yes'}else{'No'}
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(5).Shape.TextFrame.TextRange.Text = if($Health.'Event Type' -like '*Planned Maintenance*' -or $Health.'Event Type' -eq 'All'){'Yes'}else{'No'}
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(6).Shape.TextFrame.TextRange.Text = if($Health.'Event Type' -like '*Health Advisories*' -or $Health.'Event Type' -eq 'All'){'Yes'}else{'No'}
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(7).Shape.TextFrame.TextRange.Text = if($Health.'Event Type' -like '*Security Advisory*' -or $Health.'Event Type' -eq 'All'){'Yes'}else{'No'}
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(8).Shape.TextFrame.TextRange.Text = ' '
                            $Counter ++
                            $row ++
                        }
                }
        }

        ############# Slide 23
        function Slide23 {
            Write-Debug "Editing Slide 23 - High Impact Issues"

            $FirstSlide = 23
            $TableID = 6
            $CurrentSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}
            $CoreSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}

            $TargetShape = ($CurrentSlide.Shapes | Where-Object {$_.Id -eq 41})
            $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE
            #$TargetShape.Delete()

            $row = 2
            while ($row -lt 6)
                {
                    $cell = 1
                    while($cell -lt 5)
                        {
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells($cell).Shape.TextFrame.TextRange.Text = ''
                            $Cell ++
                        }
                    $row ++
                }

            $Counter = 1
            $RecomNumber = 1
            $row = 2
            foreach($Impact in $HighImpact)
                {
                    if($Counter -lt 14)
                        {
                            #Number
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$RecomNumber
                            #Recommendation
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = $Impact.'Recommendation Title'
                            #Service
                            if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                                {
                                    $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                                }
                            else
                                {
                                    $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                                }
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = $ServiceName
                            #Impacted Resources
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = [string]$Impact.'Number of Impacted Resources?'
                            $counter ++
                            $RecomNumber ++
                            $row ++
                        }
                    else
                        {
                            $Counter = 1
                            $CustomLayout = $CurrentSlide.CustomLayout
                            $FirstSlide ++
                            $pres.Slides.addSlide($FirstSlide,$customLayout) | Out-Null

                            $NextSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}
                            ($CoreSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Copy()
                            Start-Sleep -Milliseconds 100
                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 2}).TextFrame.TextRange.Paste() | Out-Null
                            Start-Sleep -Milliseconds 100
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Copy()
                            Start-Sleep -Milliseconds 100
                            $NextSlide.Shapes.Paste() | Out-Null
                            Start-Sleep -Milliseconds 100
                            $TableID = 3
                            ($CoreSlide.Shapes | Where-Object {$_.Id -eq 41}).Copy()
                            Start-Sleep -Milliseconds 100
                            $NextSlide.Shapes.Paste() | Out-Null
                            Start-Sleep -Milliseconds 100

                            $rowTemp = 2
                            while ($rowTemp -lt 15)
                                {
                                    $cell = 1
                                    while($cell -lt 5)
                                        {
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($rowTemp).Cells($cell).Shape.TextFrame.TextRange.Text = ''
                                            $Cell ++
                                        }
                                    $rowTemp ++
                                }

                            $CurrentSlide = $NextSlide

                            $row = 2
                            #Number
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$RecomNumber
                            #Recommendation
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = $Impact.'Recommendation Title'
                            #Service
                            if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                                {
                                    $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                                }
                            else
                                {
                                    $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                                }
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = $ServiceName
                            #Impacted Resources
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = [string]$Impact.'Number of Impacted Resources?'
                            $Counter ++
                            $RecomNumber ++
                            $row ++
                        }
                }

        }

        ############# Slide 24
        function Slide24 {
            Write-Debug "Editing Slide 24 - Medium Impact Issues"

            $FirstSlide = 24
            $TableID = 6
            $CurrentSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}
            $CoreSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}

            $TargetShape = ($CurrentSlide.Shapes | Where-Object {$_.Id -eq 41})
            $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE
            #$TargetShape.Delete()

            $row = 2
            while ($row -lt 6)
                {
                    $cell = 1
                    while($cell -lt 5)
                        {
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells($cell).Shape.TextFrame.TextRange.Text = ''
                            $Cell ++
                        }
                    $row ++
                }

            $Counter = 1
            $RecomNumber = 1
            $row = 2
            foreach($Impact in $MediumImpact)
                {
                    if($Counter -lt 14)
                        {
                            #Number
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$RecomNumber
                            #Recommendation
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = $Impact.'Recommendation Title'
                            #Service
                            if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                                {
                                    $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                                }
                            else
                                {
                                    $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                                }
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = $ServiceName
                            #Impacted Resources
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = [string]$Impact.'Number of Impacted Resources?'
                            $counter ++
                            $RecomNumber ++
                            $row ++
                        }
                    else
                        {
                            $Counter = 1
                            $CustomLayout = $CurrentSlide.CustomLayout
                            $FirstSlide ++
                            $pres.Slides.addSlide($FirstSlide,$customLayout) | Out-Null

                            $NextSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}
                            ($CoreSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Copy()
                            Start-Sleep -Milliseconds 100
                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 2}).TextFrame.TextRange.Paste() | Out-Null
                            Start-Sleep -Milliseconds 100
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Copy()
                            Start-Sleep -Milliseconds 100
                            $NextSlide.Shapes.Paste() | Out-Null
                            Start-Sleep -Milliseconds 100
                            $TableID = 3
                            ($CoreSlide.Shapes | Where-Object {$_.Id -eq 41}).Copy()
                            Start-Sleep -Milliseconds 100
                            $NextSlide.Shapes.Paste() | Out-Null
                            Start-Sleep -Milliseconds 100

                            $rowTemp = 2
                            while ($rowTemp -lt 15)
                                {
                                    $cell = 1
                                    while($cell -lt 5)
                                        {
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($rowTemp).Cells($cell).Shape.TextFrame.TextRange.Text = ''
                                            $Cell ++
                                        }
                                    $rowTemp ++
                                }

                            $CurrentSlide = $NextSlide

                            $row = 2
                            #Number
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$RecomNumber
                            #Recommendation
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = $Impact.'Recommendation Title'
                            #Service
                            if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                                {
                                    $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                                }
                            else
                                {
                                    $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                                }
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = $ServiceName
                            #Impacted Resources
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = [string]$Impact.'Number of Impacted Resources?'
                            $Counter ++
                            $RecomNumber ++
                            $row ++
                        }
                }

        }

        ############# Slide 25
        function Slide25 {
            Write-Debug "Editing Slide 25 - Low Impact Issues"

            $FirstSlide = 25
            $TableID = 6
            $CurrentSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}
            $CoreSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}

            $TargetShape = ($CurrentSlide.Shapes | Where-Object {$_.Id -eq 41})
            $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE
            #$TargetShape.Delete()

            $row = 2
            while ($row -lt 6)
                {
                    $cell = 1
                    while($cell -lt 5)
                        {
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells($cell).Shape.TextFrame.TextRange.Text = ''
                            $Cell ++
                        }
                    $row ++
                }

            $Counter = 1
            $RecomNumber = 1
            $row = 2
            foreach($Impact in $LowImpact)
                {
                    if($Counter -lt 14)
                        {
                            #Number
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$RecomNumber
                            #Recommendation
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = $Impact.'Recommendation Title'
                            #Service
                            if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                                {
                                    $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                                }
                            else
                                {
                                    $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                                }
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = $ServiceName
                            #Impacted Resources
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = [string]$Impact.'Number of Impacted Resources?'
                            $counter ++
                            $RecomNumber ++
                            $row ++
                        }
                    else
                        {
                            $Counter = 1
                            $CustomLayout = $CurrentSlide.CustomLayout
                            $FirstSlide ++
                            $pres.Slides.addSlide($FirstSlide,$customLayout) | Out-Null

                            $NextSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $FirstSlide}
                            ($CoreSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Copy()
                            Start-Sleep -Milliseconds 100
                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 2}).TextFrame.TextRange.Paste() | Out-Null
                            Start-Sleep -Milliseconds 100
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Copy()
                            Start-Sleep -Milliseconds 100
                            $NextSlide.Shapes.Paste() | Out-Null
                            Start-Sleep -Milliseconds 100
                            $TableID = 3
                            ($CoreSlide.Shapes | Where-Object {$_.Id -eq 41}).Copy()
                            Start-Sleep -Milliseconds 100
                            $NextSlide.Shapes.Paste() | Out-Null
                            Start-Sleep -Milliseconds 100

                            $rowTemp = 2
                            while ($rowTemp -lt 15)
                                {
                                    $cell = 1
                                    while($cell -lt 5)
                                        {
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($rowTemp).Cells($cell).Shape.TextFrame.TextRange.Text = ''
                                            $Cell ++
                                        }
                                    $rowTemp ++
                                }

                            $CurrentSlide = $NextSlide

                            $row = 2
                            #Number
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(1).Shape.TextFrame.TextRange.Text = [string]$RecomNumber
                            #Recommendation
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(2).Shape.TextFrame.TextRange.Text = $Impact.'Recommendation Title'
                            #Service
                            if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                                {
                                    $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                                }
                            else
                                {
                                    $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                                }
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(3).Shape.TextFrame.TextRange.Text = $ServiceName
                            #Impacted Resources
                            ($CurrentSlide.Shapes | Where-Object {$_.Id -eq $TableID}).Table.Rows($row).Cells(4).Shape.TextFrame.TextRange.Text = [string]$Impact.'Number of Impacted Resources?'
                            $Counter ++
                            $RecomNumber ++
                            $row ++
                        }
                }

        }

        ############# Slide 28
        function Slide28 {
            Write-Debug "Editing Slide 28 - Recent Microsoft Outages"
            $Loop = 1
            $CurrentSlide = 28

            if(![string]::IsNullOrEmpty($Global:Outages))
                {
                    foreach ($Outage in $Global:Outages)
                        {
                            if($Loop -eq 1)
                                {
                                    $OutageName = ($Outage.'Tracking ID'+' - '+$Outage.title)

                                    $OutageService = $Outage.'Impacted Service'

                                    $Slide28 = $pres.Slides | Where-Object {$_.SlideIndex -eq 28}

                                    $TargetShape = ($Slide28.Shapes | Where-Object {$_.Id -eq 4})
                                    $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE
                                    #$TargetShape.Delete()

                                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(1).Text = $OutageName
                                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(2).Text = "What happened:"
                                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(3).Text = $Outage.'What happened'
                                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(2).Copy()
                                    Start-Sleep -Milliseconds 100
                                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(4).Paste() | Out-Null
                                    Start-Sleep -Milliseconds 100
                                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(4).Text = "Impacted Service:"
                                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(3).Copy()
                                    Start-Sleep -Milliseconds 100
                                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(5).Paste() | Out-Null
                                    Start-Sleep -Milliseconds 100
                                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(5).Text = $OutageService
                                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(4).Copy()
                                    Start-Sleep -Milliseconds 100
                                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(6).Paste() | Out-Null
                                    Start-Sleep -Milliseconds 100
                                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(6).Text = "How can customers make incidents like this less impactful:"
                                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(5).Copy()
                                    Start-Sleep -Milliseconds 100
                                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(7).Paste() | Out-Null
                                    Start-Sleep -Milliseconds 100
                                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(7).Text = $Outage.'How can customers make incidents like this less impactful'

                                    while(($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs().count -gt 7)
                                        {
                                            ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(8).Delete()
                                        }
                                }
                            else
                                {
                                    ############### NEXT 9 SLIDES

                                    $OutageName = ($Outage.'Tracking ID'+' - '+$Outage.title)

                                    $OutageService = $Outage.'Impacted Service'
                                    $CustomLayout = $Slide28.CustomLayout
                                    $pres.Slides.addSlide($CurrentSlide,$customLayout) | Out-Null

                                    $NextSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $CurrentSlide}

                                    ($Slide28.Shapes | Where-Object {$_.Id -eq 6}).TextFrame.TextRange.Copy()
                                    Start-Sleep -Milliseconds 100

                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 2}).TextFrame.TextRange.Paste() | Out-Null
                                    Start-Sleep -Milliseconds 100

                                    ($Slide28.Shapes | Where-Object {$_.Id -eq 4}).Copy()
                                    Start-Sleep -Milliseconds 100

                                    $NextSlide.Shapes.Paste() | Out-Null
                                    Start-Sleep -Milliseconds 100

                                    ($Slide28.Shapes | Where-Object {$_.Id -eq 7}).Copy()
                                    Start-Sleep -Milliseconds 100

                                    $NextSlide.Shapes.Paste() | Out-Null
                                    Start-Sleep -Milliseconds 100

                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(1).Text = $OutageName
                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(2).Text = "What happened:"
                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(3).Text = $Outage.'What happened'
                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(2).Copy()
                                    Start-Sleep -Milliseconds 100
                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(4).Paste() | Out-Null
                                    Start-Sleep -Milliseconds 100
                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(4).Text = "Impacted Service:"
                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(3).Copy()
                                    Start-Sleep -Milliseconds 100
                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(5).Paste() | Out-Null
                                    Start-Sleep -Milliseconds 100
                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(5).Text = $OutageService
                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(4).Copy()
                                    Start-Sleep -Milliseconds 100
                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(6).Paste() | Out-Null
                                    Start-Sleep -Milliseconds 100
                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(6).Text = "How can customers make incidents like this less impactful:"
                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(5).Copy()
                                    Start-Sleep -Milliseconds 100
                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(7).Paste() | Out-Null
                                    Start-Sleep -Milliseconds 100
                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(7).Text = $Outage.'How can customers make incidents like this less impactful'

                                    ($Slide28.Shapes | Where-Object {$_.Id -eq 31}).Copy()

                                    $NextSlide.Shapes.Paste() | Out-Null

                                    while(($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs().count -gt 7)
                                        {
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 4}).TextFrame.TextRange.Paragraphs(8).Delete()
                                        }
                                }
                                $Loop ++
                                $CurrentSlide ++
                        }
                }
        }

        ############# Slide 29
        function Slide29 {
            Write-Debug "Editing Slide 29 - Sev-A Support Requests"
            $Loop = 1
            $CurrentSlide = 29
            $Slide = 1

            if(![string]::IsNullOrEmpty($Global:SupportTickets))
                {
                    foreach ($Tickets in $Global:SupportTickets)
                        {
                            $TicketName = ($Tickets.'Ticket ID'+' - '+$Tickets.Title)
                            $TicketStatus = $Tickets.'Status'
                            $TicketDate = $Tickets.'Creation Date'

                            if($Slide -eq 1)
                                {
                                    if($Loop -eq 1)
                                        {
                                            $Slide29 = $pres.Slides | Where-Object {$_.SlideIndex -eq 29}

                                            $TargetShape = ($Slide29.Shapes | Where-Object {$_.Id -eq 4})
                                            $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE
                                            #$TargetShape.Delete()

                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(1).Text = $TicketName
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(2).Text = "Status: $TicketStatus"
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(3).Text = "Creation Date: $TicketDate"
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(3).Copy()
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(4).Paste() | Out-Null
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(4).Text = "Recommendation: "

                                            while(($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs().count -gt 4)
                                                {
                                                    ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(5).Delete()
                                                }
                                            $ParagraphLoop = 5
                                            $Loop ++
                                        }
                                    else
                                        {
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.InsertAfter(".") | Out-Null
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(1).Copy()
                                            Start-Sleep -Milliseconds 100
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs($ParagraphLoop).Paste() | Out-Null
                                            Start-Sleep -Milliseconds 100
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs($ParagraphLoop).Text = $TicketName
                                            $ParagraphLoop ++
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.InsertAfter(".") | Out-Null
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(2).Copy()
                                            Start-Sleep -Milliseconds 100
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs($ParagraphLoop).Paste() | Out-Null
                                            Start-Sleep -Milliseconds 100
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs($ParagraphLoop).Text = "Status: $TicketStatus"
                                            $ParagraphLoop ++
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.InsertAfter(".") | Out-Null
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(3).Copy()
                                            Start-Sleep -Milliseconds 100
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs($ParagraphLoop).Paste() | Out-Null
                                            Start-Sleep -Milliseconds 100
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs($ParagraphLoop).Text = "Creation Date: $TicketDate"
                                            $ParagraphLoop ++
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.InsertAfter(".") | Out-Null
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(4).Copy()
                                            Start-Sleep -Milliseconds 100
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs($ParagraphLoop).Paste() | Out-Null
                                            Start-Sleep -Milliseconds 100
                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs($ParagraphLoop).Text = "Recommendation: "
                                            $ParagraphLoop ++

                                            if($Loop -eq 4)
                                                {
                                                    $Loop = 1
                                                    $Slide ++
                                                    $CurrentSlide ++
                                                }
                                            else
                                                {
                                                    $Loop ++
                                                }
                                            Start-Sleep -Milliseconds 500
                                        }
                                }
                            else
                                {
                                    if($Loop -eq 1)
                                        {
                                            $CustomLayout = $Slide29.CustomLayout
                                            $pres.Slides.addSlide($CurrentSlide,$customLayout) | Out-Null

                                            $NextSlide = $pres.Slides | Where-Object {$_.SlideIndex -eq $CurrentSlide}

                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 6}).TextFrame.TextRange.Copy()
                                            Start-Sleep -Milliseconds 200

                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 2}).TextFrame.TextRange.Paste() | Out-Null
                                            Start-Sleep -Milliseconds 100

                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 4}).Copy()
                                            Start-Sleep -Milliseconds 200

                                            $NextSlide.Shapes.Paste() | Out-Null
                                            Start-Sleep -Milliseconds 100

                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 2}).Copy()
                                            Start-Sleep -Milliseconds 200

                                            $NextSlide.Shapes.Paste() | Out-Null
                                            Start-Sleep -Milliseconds 100

                                            ($Slide29.Shapes | Where-Object {$_.Id -eq 7}).Copy()
                                            Start-Sleep -Milliseconds 200

                                            $NextSlide.Shapes.Paste() | Out-Null
                                            Start-Sleep -Milliseconds 100

                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs(1).Text = $TicketName
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs(2).Text = "Status: $TicketStatus"
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs(3).Text = "Creation Date: $TicketDate"
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs(4).Text = "Recommendation: "

                                            while(($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs().count -gt 4)
                                                {
                                                    ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs(5).Delete()
                                                }
                                            $ParagraphLoop = 5
                                            $Loop ++
                                        }
                                    else
                                        {
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.InsertAfter(".") | Out-Null
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs(1).Copy()
                                            Start-Sleep -Milliseconds 100
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs($ParagraphLoop).Paste() | Out-Null
                                            Start-Sleep -Milliseconds 100
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs($ParagraphLoop).Text = $TicketName
                                            $ParagraphLoop ++
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.InsertAfter(".") | Out-Null
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs(2).Copy()
                                            Start-Sleep -Milliseconds 100
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs($ParagraphLoop).Paste() | Out-Null
                                            Start-Sleep -Milliseconds 100
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs($ParagraphLoop).Text = "Status: $TicketStatus"
                                            $ParagraphLoop ++
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.InsertAfter(".") | Out-Null
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs(3).Copy()
                                            Start-Sleep -Milliseconds 100
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs($ParagraphLoop).Paste() | Out-Null
                                            Start-Sleep -Milliseconds 100
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs($ParagraphLoop).Text = "Creation Date: $TicketDate"
                                            $ParagraphLoop ++
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.InsertAfter(".") | Out-Null
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs(4).Copy()
                                            Start-Sleep -Milliseconds 100
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs($ParagraphLoop).Paste() | Out-Null
                                            Start-Sleep -Milliseconds 100
                                            ($NextSlide.Shapes | Where-Object {$_.Id -eq 9}).TextFrame.TextRange.Paragraphs($ParagraphLoop).Text = "Recommendation: "
                                            $ParagraphLoop ++

                                            if($Loop -eq 4)
                                                {
                                                    $Loop = 1
                                                    $Slide ++
                                                    $CurrentSlide ++
                                                }
                                            else
                                                {
                                                    $Loop ++
                                                }
                                        }
                                }
                                Start-Sleep -Milliseconds 500
                        }
                }
        }

        ############# Slide 30
        function Slide30 {
            Write-Debug "Editing Slide 30 - Service Retirement Notifications"
            $Loop = 1

            if(![string]::IsNullOrEmpty($Global:Retirements))
                {
                    $Slide30 = $pres.Slides | Where-Object {$_.SlideIndex -eq 30}

                    $TargetShape = ($Slide30.Shapes | Where-Object {$_.Id -eq 4})
                    $TargetShape.TextFrame.TextRange.Text = $AUTOMESSAGE
                    #$TargetShape.Delete()

                    ($Slide30.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(1).Text = '.'

                    while(($Slide30.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs().count -gt 2)
                        {
                            ($Slide30.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(2).Delete()
                        }

                    foreach ($Retirement in $Global:Retirements)
                        {
                            if($Loop -lt 15)
                                {
                                    if($Loop -eq 1)
                                        {
                                            $RetireName = ($Retirement.'Tracking ID'+' - '+$Retirement.Status + ' : ' + $Retirement.title)

                                            ($Slide30.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(1).Text = $RetireName
                                            $Loop ++
                                        }
                                    else
                                        {
                                            $RetireName = ($Retirement.'Tracking ID'+' - '+$Retirement.Status + ' : ' + $Retirement.title)

                                            ($Slide30.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.InsertAfter(".") | Out-Null
                                            Start-Sleep -Milliseconds 100
                                            ($Slide30.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs(1).Copy()
                                            Start-Sleep -Milliseconds 100
                                            ($Slide30.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs($Loop).Paste() | Out-Null
                                            Start-Sleep -Milliseconds 100
                                            ($Slide30.Shapes | Where-Object {$_.Id -eq 7}).TextFrame.TextRange.Paragraphs($Loop).Text = $RetireName
                                            $Loop ++
                                        }
                                }
                        }
                }
        }

        Slide1
        Slide12
        Slide16
        Slide17

        Slide30
        Slide29
        Slide28

        Slide25
        Slide24
        Slide23

        Slide21
    }

    function Word_Orchestrator {
        function WordCore {
            Write-Debug 'Editing Word Core File'
            $MatchCase = $false
            $MatchWholeWord = $true
            $MatchWildcards = $false
            $MatchSoundsLike = $false
            $MatchAllWordForms = $false
            $Forward = $true
            $wrap = $wdFindContinue
            $wdFindContinue = 1
            $Format = $false
            $ReplaceAll = 2

            $FindText = '[Workload Name]'
            $ReplaceWith = $WorkloadName
            $Global:Document.Content.Find.Execute($FindText, $MatchCase, $MatchWholeWord, $MatchWildcards, $MatchSoundsLike, $MatchAllWordForms, $Forward, $wrap, $Format, $ReplaceWith, $ReplaceAll) | Out-Null

            $FindText = 'Workload Name'
            $ReplaceWith = $WorkloadName
            $Global:Document.Content.Find.Execute($FindText, $MatchCase, $MatchWholeWord, $MatchWildcards, $MatchSoundsLike, $MatchAllWordForms, $Forward, $wrap, $Format, $ReplaceWith, $ReplaceAll) | Out-Null

            $FindText = '[Customer Name]'
            $ReplaceWith = $CustomerName
            $Global:Document.Content.Find.Execute($FindText, $MatchCase, $MatchWholeWord, $MatchWildcards, $MatchSoundsLike, $MatchAllWordForms, $Forward, $wrap, $Format, $ReplaceWith, $ReplaceAll) | Out-Null

            $FindText = '[Type Customer Name Here]'
            $ReplaceWith = $CustomerName
            $Global:Document.Content.Find.Execute($FindText, $MatchCase, $MatchWholeWord, $MatchWildcards, $MatchSoundsLike, $MatchAllWordForms, $Forward, $wrap, $Format, $ReplaceWith, $ReplaceAll) | Out-Null
            $Global:Document.Sections(1).Headers(1).Range.Find.Execute($FindText, $MatchCase, $MatchWholeWord, $MatchWildcards, $MatchSoundsLike, $MatchAllWordForms, $Forward, $wrap, $Format, $ReplaceWith, $ReplaceAll) | Out-Null

            # Total Recommendations
            $Global:Document.Content.Paragraphs(145).Range.Text = [string]($ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0}).count
            #High Impact
            $Global:Document.Content.Paragraphs(155).Range.Text = [string]($ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'High'}).count
            #Medium Impact
            $Global:Document.Content.Paragraphs(157).Range.Text = [string]($ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'Medium'}).count
            #Low Impact
            $Global:Document.Content.Paragraphs(159).Range.Text = [string]($ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 0 -and $_.Impact -eq 'Low'}).count
            #Impacted Resources
            $Global:Document.Content.Paragraphs(165).Range.Text = [string]($ExcelContent.id | Where-Object {![string]::IsNullOrEmpty($_)} | Select-Object -Unique).count

            $HealthHigh = $ExcelCore | Where-Object {$_."Number of Impacted Resources?" -gt 1 -and $_.Impact -eq 'High'} | Sort-Object -Property "Number of Impacted Resources?" -Descending

            #Risk Assessment Result
            $Global:Document.Content.Paragraphs(176).Range.Text = ''
            $Global:Document.Content.Paragraphs(175).Range.Text = ''

            #$Global:Document.Content.Paragraphs(158).Range.ListFormat.ApplyListTemplate($Global:Word.Application.ListGalleries[1].ListTemplates[3])

            #Health Assessment Result
            $Global:Document.Content.Paragraphs(172).Range.Text = ''

            #$Global:Document.Content.Paragraphs(158).Range.ListFormat.ApplyListTemplate($Global:Word.Application.ListGalleries[1].ListTemplates[3])
            $Global:Document.Content.Paragraphs(171).Range.Select()
            $Loops = 1
            Foreach($Risk in $HealthHigh)
                {
                    if([string]::IsNullOrEmpty($Risk))
                        {
                            $Global:Document.Content.Paragraphs(171).Range.Text = ''
                        }
                    $Title = $Risk.'Recommendation Title'
                    if($Loops -eq 1)
                        {
                            $Global:Word.Selection.TypeText($Title) | Out-Null
                        }
                    else
                        {
                            $Global:Word.Selection.TypeParagraph() | Out-Null
                            $Global:Word.Selection.TypeText($Title) | Out-Null
                        }
                    $Loops ++
                }
        }
        function WordCharts {
            Write-Debug 'Editing Word Charts'
            #Charts
            $WS2 = $Global:Ex.Worksheets | Where-Object { $_.Name -eq 'Charts' }

            $Position = $Global:Document.Content.Paragraphs(181).Range.Start

            $Global:Document.Content.InlineShapes(10).Delete() | Out-Null
            $Global:Document.Content.InlineShapes(9).Delete() | Out-Null
            $Global:Document.Content.InlineShapes(8).Delete() | Out-Null

            $WS2.ChartObjects('ChartP0').copy()

            $Global:Document.Range($Position,$Position).Select()
            $Global:Word.Selection.Paste() | Out-Null

            #$Global:Word.Selection.InsertParagraphAfter()

            $WS2.ChartObjects('ChartP1').copy()
            $Global:Word.Selection.Paste() | Out-Null

            #$Global:Word.Selection.InsertParagraphAfter()

            #$Global:Word.Selection.InsertParagraphAfter()
        }
        function WordOutages {
            Write-Debug 'Editing Outages'
            $Global:Document.Tables(10).Rows(2).Cells(1).Range.Text = ''
            $Global:Document.Tables(10).Rows(2).Cells(2).Range.Text = ''
            $Global:Document.Tables(10).Rows(2).Cells(3).Range.Text = ''

            Write-Debug 'Looping Outages'
            $LineCounter = 2
            if(![string]::IsNullOrEmpty($Global:Outages))
                {
                    foreach ($Outage in $Global:Outages)
                    {
                        if($LineCounter -gt 3)
                            {
                                $Global:Document.Tables(10).Rows.Add() | Out-Null
                            }
                        $OutageName = ($Outage.'Tracking ID'+' - '+$Outage.title)
                        $OutageWhat = $Outage.'What happened'
                        $OutageRecom = $Outage.'How can customers make incidents like this less impactful'

                        $Global:Document.Tables(10).Rows($LineCounter).Cells(1).Range.Text = $OutageName
                        $Global:Document.Tables(10).Rows($LineCounter).Cells(2).Range.Text = $OutageWhat
                        $Global:Document.Tables(10).Rows($LineCounter).Cells(3).Range.Text = $OutageRecom

                        $LineCounter ++
                    }
                }
        }
        function WordTables {
            Write-Debug 'Editing Tables'
            #Clean the table 6
            $row = 2
            while ($row -lt 5)
                {
                    $cell = 1
                    while($cell -lt 5)
                        {
                            $Global:Document.Tables(6).Rows($row).Cells($cell).Range.Text = ''
                            $Cell ++
                        }
                    $row ++
                }

            #Clean the table 7
            $row = 2
            while ($row -lt 3)
                {
                    $cell = 1
                    while($cell -lt 5)
                        {
                            $Global:Document.Tables(7).Rows($row).Cells($cell).Range.Text = ''
                            $Cell ++
                        }
                    $row ++
                }

            #Clean the table 8
            $row = 2
            while ($row -lt 3)
                {
                    $cell = 1
                    while($cell -lt 5)
                        {
                            $Global:Document.Tables(8).Rows($row).Cells($cell).Range.Text = ''
                            $Cell ++
                        }
                    $row ++
                }

            #Populate Table Health and Risk Summary High
            $counter = 1
            $row = 2
            foreach($Impact in $HighImpact)
                {
                    if ($counter -lt 14)
                        {
                            #Number
                            $Global:Document.Tables(6).Rows($row).Cells(1).Range.Text = [string]$counter
                            #Recommendation
                            $Global:Document.Tables(6).Rows($row).Cells(2).Range.Text = $Impact.'Recommendation Title'
                            #Service
                            if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                                {
                                    $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                                }
                            else
                                {
                                    $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                                }
                                $Global:Document.Tables(6).Rows($row).Cells(3).Range.Text = $ServiceName
                            #Impacted Resources
                            $Global:Document.Tables(6).Rows($row).Cells(4).Range.Text = [string]$Impact.'Number of Impacted Resources?'
                            $counter ++
                            $row ++
                        }
                    else
                        {
                            $Global:Document.Tables(6).Rows.add() | Out-Null
                            #Number
                            $Global:Document.Tables(6).Rows($row).Cells(1).Range.Text = [string]$counter
                            #Recommendation
                            $Global:Document.Tables(6).Rows($row).Cells(2).Range.Text = $Impact.'Recommendation Title'
                            #Service
                            if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                                {
                                    $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                                }
                            else
                                {
                                    $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                                }
                                $Global:Document.Tables(6).Rows($row).Cells(3).Range.Text = $ServiceName
                            #Impacted Resources
                            $Global:Document.Tables(6).Rows($row).Cells(4).Range.Text = [string]$Impact.'Number of Impacted Resources?'
                            $counter ++
                            $row ++
                        }
                }

            #Populate Table Health and Risk Summary Medium
            $counter = 1
            $row = 2
            foreach($Impact in $MediumImpact)
                {
                    if ($counter -lt 14)
                        {
                            #Number
                            $Global:Document.Tables(7).Rows($row).Cells(1).Range.Text = [string]$counter
                            #Recommendation
                            $Global:Document.Tables(7).Rows($row).Cells(2).Range.Text = $Impact.'Recommendation Title'
                            #Service
                            if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                                {
                                    $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                                }
                            else
                                {
                                    $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                                }
                                $Global:Document.Tables(7).Rows($row).Cells(3).Range.Text = $ServiceName
                            #Impacted Resources
                            $Global:Document.Tables(7).Rows($row).Cells(4).Range.Text = [string]$Impact.'Number of Impacted Resources?'
                            $counter ++
                            $row ++
                        }
                    else
                        {
                            $Global:Document.Tables(7).Rows.add() | Out-Null
                            #Number
                            $Global:Document.Tables(7).Rows($row).Cells(1).Range.Text = [string]$counter
                            #Recommendation
                            $Global:Document.Tables(7).Rows($row).Cells(2).Range.Text = $Impact.'Recommendation Title'
                            #Service
                            if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                                {
                                    $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                                }
                            else
                                {
                                    $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                                }
                                $Global:Document.Tables(7).Rows($row).Cells(3).Range.Text = $ServiceName
                            #Impacted Resources
                            $Global:Document.Tables(7).Rows($row).Cells(4).Range.Text = [string]$Impact.'Number of Impacted Resources?'
                            $counter ++
                            $row ++
                        }
                }

            #Populate Table Health and Risk Summary Low
            $counter = 1
            $row = 2
            foreach($Impact in $LowImpact)
                {
                    if ($counter -lt 14)
                        {
                            #Number
                            $Global:Document.Tables(8).Rows($row).Cells(1).Range.Text = [string]$counter
                            #Recommendation
                            $Global:Document.Tables(8).Rows($row).Cells(2).Range.Text = $Impact.'Recommendation Title'
                            #Service
                            if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                                {
                                    $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                                }
                            else
                                {
                                    $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                                }
                                $Global:Document.Tables(8).Rows($row).Cells(3).Range.Text = $ServiceName
                            #Impacted Resources
                            $Global:Document.Tables(8).Rows($row).Cells(4).Range.Text = [string]$Impact.'Number of Impacted Resources?'
                            $counter ++
                            $row ++
                        }
                    else
                        {
                            $Global:Document.Tables(8).Rows.add() | Out-Null
                            #Number
                            $Global:Document.Tables(8).Rows($row).Cells(1).Range.Text = [string]$counter
                            #Recommendation
                            $Global:Document.Tables(8).Rows($row).Cells(2).Range.Text = $Impact.'Recommendation Title'
                            #Service
                            if($Impact.'Azure Service / Well-Architected' -eq 'Well Architected')
                                {
                                    $ServiceName = ('WAF - '+$Impact.'Azure Service / Well-Architected Topic')
                                }
                            else
                                {
                                    $ServiceName = $Impact.'Azure Service / Well-Architected Topic'
                                }
                                $Global:Document.Tables(8).Rows($row).Cells(3).Range.Text = $ServiceName
                            #Impacted Resources
                            $Global:Document.Tables(8).Rows($row).Cells(4).Range.Text = [string]$Impact.'Number of Impacted Resources?'
                            $counter ++
                            $row ++
                        }
                }
        }
        function WordRetirements {
            Write-Debug 'Editing Retirements'
            $Global:Document.Tables(12).Rows(2).Cells(1).Range.Text = ''
            $Global:Document.Tables(12).Rows(2).Cells(2).Range.Text = ''
            $Global:Document.Tables(12).Rows(2).Cells(3).Range.Text = ''

            $LineCounter = 2
            if(![string]::IsNullOrEmpty($Global:Retirements))
                {
                    foreach ($Retires in $Global:Retirements)
                    {
                        if($LineCounter -gt 3)
                            {
                                $Global:Document.Tables(12).Rows.Add() | Out-Null
                            }
                        $RetireName = ($Retires.'Tracking ID'+' - '+ $Retires.Status + ' : ' + $Retires.title)
                        $RetireSub = $Retires.Subscription
                        $RetireDetails = $Retires.Details

                        $Global:Document.Tables(12).Rows($LineCounter).Cells(1).Range.Text = $RetireName
                        $Global:Document.Tables(12).Rows($LineCounter).Cells(2).Range.Text = $RetireSub
                        $Global:Document.Tables(12).Rows($LineCounter).Cells(3).Range.Text = $RetireDetails

                        $LineCounter ++
                    }
                }
        }
        function WordSupports {
            Write-Debug 'Editing Support Tickets'
            $Global:Document.Tables(11).Rows(2).Cells(1).Range.Text = ''
            $Global:Document.Tables(11).Rows(2).Cells(2).Range.Text = ''
            $Global:Document.Tables(11).Rows(2).Cells(3).Range.Text = ''
            $Global:Document.Tables(11).Rows(2).Cells(4).Range.Text = ''

            $LineCounter = 2
            if(![string]::IsNullOrEmpty($Global:SupportTickets))
                {
                    foreach ($Ticket in $Global:SupportTickets)
                        {
                            if($LineCounter -gt 3)
                                {
                                    $Global:Document.Tables(11).Rows.Add() | Out-Null
                                }
                            $TicketName = ($Ticket.'Ticket ID'+' - '+ $Ticket.Title)
                            $CreatedDate = $Ticket.'Creation Date'

                            $Global:Document.Tables(11).Rows($LineCounter).Cells(1).Range.Text = $TicketName
                            $Global:Document.Tables(11).Rows($LineCounter).Cells(2).Range.Text = $CreatedDate
                            $Global:Document.Tables(11).Rows($LineCounter).Cells(3).Range.Text = " "
                            $Global:Document.Tables(11).Rows($LineCounter).Cells(4).Range.Text = " "

                            $LineCounter ++
                        }
                }
        }
        function WordHealths {
            Write-Debug 'Editing Service Health Alerts'
            $Global:Document.Tables(5).Rows(3).Cells(1).Range.Text = ''
            $Global:Document.Tables(5).Rows(3).Cells(2).Range.Text = ''
            $Global:Document.Tables(5).Rows(3).Cells(3).Range.Text = ''
            $Global:Document.Tables(5).Rows(3).Cells(4).Range.Text = ''
            $Global:Document.Tables(5).Rows(3).Cells(5).Range.Text = ''
            $Global:Document.Tables(5).Rows(3).Cells(6).Range.Text = ''
            $Global:Document.Tables(5).Rows(3).Cells(7).Range.Text = ''
            $Global:Document.Tables(5).Rows(3).Cells(8).Range.Text = ''

            $LineCounter = 3
            if(![string]::IsNullOrEmpty($Global:ServiceHealth))
                {
                    foreach ($Health in $Global:ServiceHealth)
                        {
                            if($LineCounter -gt 4)
                                {
                                    $Global:Document.Tables(5).Rows.Add() | Out-Null
                                }
                            $ActionGroup = $Health.'Action Group'

                            $Global:Document.Tables(5).Rows($LineCounter).Cells(1).Range.Text = $Health.Subscription
                            $Global:Document.Tables(5).Rows($LineCounter).Cells(2).Range.Text = $Health.Services
                            $Global:Document.Tables(5).Rows($LineCounter).Cells(3).Range.Text = $Health.Regions
                            $Global:Document.Tables(5).Rows($LineCounter).Cells(4).Range.Text = if($Health.'Event Type' -like '*Service Issues*' -or $Health.'Event Type' -eq 'All'){'Yes'}else{'No'}
                            $Global:Document.Tables(5).Rows($LineCounter).Cells(5).Range.Text = if($Health.'Event Type' -like '*Planned Maintenance*' -or $Health.'Event Type' -eq 'All'){'Yes'}else{'No'}
                            $Global:Document.Tables(5).Rows($LineCounter).Cells(6).Range.Text = if($Health.'Event Type' -like '*Health Advisories*' -or $Health.'Event Type' -eq 'All'){'Yes'}else{'No'}
                            $Global:Document.Tables(5).Rows($LineCounter).Cells(7).Range.Text = if($Health.'Event Type' -like '*Security Advisory*' -or $Health.'Event Type' -eq 'All'){'Yes'}else{'No'}
                            $Global:Document.Tables(5).Rows($LineCounter).Cells(8).Range.Text = $ActionGroup
                            $LineCounter ++
                        }
                }
        }

        WordCharts
        WordCore
        WordRetirements
        WordSupports
        WordOutages
        WordTables
        WordHealths
    }



    #Call the functions
    $Global:Version = "2.0.3"
    Write-Host "Version: " -NoNewline
    Write-Host $Global:Version -ForegroundColor DarkBlue

    if ($Help.IsPresent) {
        Help
        Exit
    }

    LocalFiles
    Excel
    PPT
    Write-Host "Editing " -NoNewline
    Write-Host "PowerPoint" -ForegroundColor DarkRed -NoNewline
    Write-Host " "
    PPT_Orchestrator

    $PPTFinalFile = ($PSScriptRoot+'\Executive Summary Presentation - ' + $CustomerName + ' - '+ (get-date -Format "yyyy-MM-dd-HH-mm") +'.pptx')
    $Global:pres.SaveAs($PPTFinalFile)
    $Global:pres.Close()
    $Global:Application.Quit()
    Get-Process -Name "POWERPNT" -ErrorAction Ignore | Where-Object { $_.CommandLine -like '*/automation*' } | Stop-Process

    if ($WordTemplateFile)
        {
            Word
            Write-Host "Editing " -NoNewline
            Write-Host "Word" -ForegroundColor DarkBlue -NoNewline
            Write-Host " "
            Word_Orchestrator
        }
}

$TotalTime = $Global:Runtime.Totalminutes.ToString('#######.##')

################ Finishing

Write-Debug "Closing Excel"
$Global:Ex.Save()
$Global:Ex.Close()
$Global:ExcelApplication.Quit()
# Ensures the Excel process opened by the API is closed
Get-Process -Name "excel" -ErrorAction Ignore | Where-Object { $_.CommandLine -like '*/automation*' } | Stop-Process

Write-Host "---------------------------------------------------------------------"
Write-Host ('Execution Complete. Total Runtime was: ') -NoNewline
Write-Host $TotalTime -NoNewline -ForegroundColor Cyan
Write-Host (' Minutes')
Write-Host 'PowerPoint File Saved As: ' -NoNewline
Write-Host $PPTFinalFile -ForegroundColor Cyan

if ($WordTemplateFile)
    {
        $WordFinalFile = ($PSScriptRoot+'\Assessment Report - ' + $CustomerName + ' - '+ (get-date -Format "yyyy-MM-dd-HH-mm") +'.docx')
        $Global:Document.SaveAs($WordFinalFile)
        Write-Host 'Word File Saved As: ' -NoNewline
        Write-Host $WordFinalFile -ForegroundColor Cyan
        $Global:Document.Close()
        $Global:Word.Quit()
        Get-Process -Name "WINWORD" -ErrorAction Ignore | Where-Object { $_.CommandLine -like '*/automation*' } | Stop-Process
    }
Write-Host "---------------------------------------------------------------------"
