- description: Use appropriate patterns for managing outgoing connections
  aprlGuid: 7ffd4456-d121-4cdb-a776-29762e1bff8d
  recommendationTypeId: null
  recommendationControl: Scalability
  recommendationImpact: Medium
  recommendationResourceType: WellArchitected/Develop
  recommendationMetadataState: Active
  longDescription: |
    Outgoing connections are the requests that your cloud solution makes to external services or resources, such as databases, APIs, or third-party providers. Managing these connections properly is crucial for ensuring the reliability and performance of your solution. You should use appropriate patterns for opening, closing, reusing, and pooling outgoing connections, depending on the type and frequency of the requests. For example, you can use the circuit breaker pattern to prevent your solution from making repeated requests to a failing service, or you can use connection pooling to reuse existing connections and reduce the overhead of creating new ones. Additionally, you can use patterns like dependency injection or factory patterns to manage connection objects in code, and make sure to close connections you no longer use to prevent port exhaustion.
  potentialBenefits: Increase the application's ability to manage outgoing connections at scale
  pgVerified: false
  publishedToLearn: false
  publishedToAdvisor: no
  automationAvailable: no
  tags: null
  learnMoreLink:
    - name: Using dependency injection in .NET
      url: "https://learn.microsoft.com/dotnet/core/extensions/dependency-injection-usage"
    - name: Use IHttpClientFactory to implement resilient HTTP requests
      url: "https://learn.microsoft.com/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests"

- description: Expect outgoing connections to fail
  aprlGuid: 4d03e777-bc01-4a35-b23c-92cfd4f218be
  recommendationTypeId: null
  recommendationControl: High Availability
  recommendationImpact: Medium
  recommendationResourceType: WellArchitected/Develop
  recommendationMetadataState: Active
  longDescription: |
    One of the main challenges of cloud computing is that you have to deal with uncertainty and unpredictability of network communication. Outgoing connections can fail for various reasons, such as network congestion, timeouts, service outages, or configuration errors. You should expect these failures to occur and design your solution to handle them gracefully. For example, you can use patterns like retry, fallback, or timeout to recover from transient failures, or use patterns like bulkhead or queue-based load leveling to isolate and manage the impact of failures on your system. By expecting and handling outgoing connection failures, you can improve the resilience and availability of your cloud solution.
  potentialBenefits: Increase the application's outgoing connection reliability
  pgVerified: false
  publishedToLearn: false
  publishedToAdvisor: no
  automationAvailable: no
  tags: null
  learnMoreLink:
    - name: Architecture Center - Retry Patterns
      url: "https://learn.microsoft.com/azure/architecture/patterns/retry"

- description: Ensure the infrastructure can support the number of outgoing connections
  aprlGuid: f1993b50-61a0-4206-8215-c43e3fd61500
  recommendationTypeId: null
  recommendationControl: Scalability
  recommendationImpact: High
  recommendationResourceType: WellArchitected/Develop
  recommendationMetadataState: Active
  longDescription: |
    Outgoing connections go through various components on the network path to their destination. These components include gateways, proxies, firewalls, or other appliances as well as Azure NAT gateways or other means of scaling outgoing connections. Make sure that these components can scale to at least the expected outgoing traffic volume.
  potentialBenefits: Increase the application's outgoing connection Scalability
  pgVerified: false
  publishedToLearn: false
  publishedToAdvisor: no
  automationAvailable: no
  tags: null
  learnMoreLink:
    - name: Ensure zone resilient outbound connectivity with NAT gateway
      url: "https://azure.microsoft.com/blog/ensure-zone-resilient-outbound-connectivity-with-nat-gateway/"

- description: Implement Coding Patterns to handle partial failures
  aprlGuid: d70e7d1f-b956-40da-b8f2-19378ab61b63
  recommendationTypeId: null
  recommendationControl: High Availability
  recommendationImpact: Medium
  recommendationResourceType: WellArchitected/Develop
  recommendationMetadataState: Active
  longDescription: |
    Partial failures are inevitable in distributed systems, where some components may fail or become unavailable while others continue to function. Therefore, cloud solutions should implement patterns to handle partial failures gracefully and avoid disrupting the entire system. Some of these patterns include retrying failed operations with exponential backoff, using timeouts to limit the impact of slow or unresponsive services, and fallback logic to provide alternative responses when the primary service is not available. As an example, dynamic content loaded into a webpage should revert to default values if the content is unavailable or should be hidden altogether. This presents a more favorable user experience than displaying error messages.
  potentialBenefits: Give users a workable experience despite ongoing partial issues
  pgVerified: false
  publishedToLearn: false
  publishedToAdvisor: no
  automationAvailable: no
  tags: null
  learnMoreLink:
    - name: Recommendations for self-healing and self-preservation
      url: "https://learn.microsoft.com/azure/well-architected/reliability/self-preservation#application-design-guidance-and-patterns-1"

- description: Implement circuit breakers to prevent cascading failures
  aprlGuid: c220efa2-c3c4-4b99-960c-4ae753c2e103
  recommendationTypeId: null
  recommendationControl: High Availability
  recommendationImpact: High
  recommendationResourceType: WellArchitected/Develop
  recommendationMetadataState: Active
  longDescription: |
    Circuit breakers are a design pattern that can help prevent cascading failures in distributed systems. The idea is to monitor the health of each service and stop sending requests to it if it becomes unhealthy or unresponsive. This way, the failure of one service does not affect the rest of the system, and the service can recover faster by avoiding overload. Circuit breakers can also trigger fallback logic, such as using cached data or default values, when the primary service is unavailable. This improves the reliability and resilience of the system and provides a better user experience.
  potentialBenefits: Prevent cascading failures during reliability incidents
  pgVerified: false
  publishedToLearn: false
  publishedToAdvisor: no
  automationAvailable: no
  tags: null
  learnMoreLink:
    - name: Architecture Center - Circuit Breaker Pattern
      url: "https://learn.microsoft.com/azure/architecture/patterns/circuit-breaker"
